{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/slider.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;0BAET,6LAAC,qKAAA,CAAA,QAAqB;gBAAC,WAAU;0BAC/B,cAAA,6LAAC,qKAAA,CAAA,QAAqB;oBAAC,WAAU;;;;;;;;;;;0BAEnC,6LAAC,qKAAA,CAAA,QAAqB;gBAAC,WAAU;;;;;;;;;;;;;AAGrC,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-insight-keywords-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Suggests keywords for user insights using AI.\n *\n * - suggestInsightKeywords - A function that suggests keywords for a given insight text.\n * - SuggestInsightKeywordsInput - The input type for the suggestInsightKeywords function.\n * - SuggestInsightKeywordsOutput - The return type for the suggestInsightKeywords function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestInsightKeywordsInputSchema = z.object({\n  insightText: z.string().describe(\"The user's insight text to analyze for keywords.\"),\n});\nexport type SuggestInsightKeywordsInput = z.infer<typeof SuggestInsightKeywordsInputSchema>;\n\nconst SuggestInsightKeywordsOutputSchema = z.object({\n  keywords: z.array(z.string()).describe('A list of suggested keywords or short phrases (3-5 items).'),\n});\nexport type SuggestInsightKeywordsOutput = z.infer<typeof SuggestInsightKeywordsOutputSchema>;\n\nexport async function suggestInsightKeywords(input: SuggestInsightKeywordsInput): Promise<SuggestInsightKeywordsOutput> {\n  return suggestInsightKeywordsFlow(input);\n}\n\nconst suggestKeywordsPrompt = ai.definePrompt({\n  name: 'suggestInsightKeywordsPrompt',\n  input: {schema: SuggestInsightKeywordsInputSchema},\n  output: {schema: SuggestInsightKeywordsOutputSchema},\n  prompt: `You are an AI assistant helping users reflect on their goals and insights.\nGiven the following user's insight about overcoming a potential failure related to their goal, suggest 3-5 concise keywords or short phrases.\nThese keywords should capture the main themes, actionable elements, or core realizations from the insight.\nEnsure the output is a list of strings.\n\nUser Insight:\n{{{insightText}}}\n\nSuggested Keywords:`,\n  config: {\n    temperature: 0.5, \n  }\n});\n\nconst suggestInsightKeywordsFlow = ai.defineFlow(\n  {\n    name: 'suggestInsightKeywordsFlow',\n    inputSchema: SuggestInsightKeywordsInputSchema,\n    outputSchema: SuggestInsightKeywordsOutputSchema,\n  },\n  async (input) => {\n    const {output} = await suggestKeywordsPrompt(input);\n    if (!output || !Array.isArray(output.keywords)) {\n        console.warn(\"LLM did not return expected keywords format. Output:\", output);\n        return { keywords: [] };\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;IAsBsB","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/categorize-failure-reason-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Categorizes a user's stated reason for potential goal failure using AI.\n *\n * - categorizeFailureReason - A function that categorizes the failure reason.\n * - CategorizeFailureReasonInput - The input type for the categorizeFailureReason function.\n * - CategorizeFailureReasonOutput - The return type for the categorizeFailureReason function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CategorizeFailureReasonInputSchema = z.object({\n  failureReason: z.string().describe(\"The user's stated reason for why their goal might fail.\"),\n});\nexport type CategorizeFailureReasonInput = z.infer<typeof CategorizeFailureReasonInputSchema>;\n\nconst CategorizeFailureReasonOutputSchema = z.object({\n  category: z.enum(['POSSIBLE_OUTCOME', 'PAST_TRAIT', 'ABSOLUTE_TRUTH'])\n    .describe('The identified category of the failure reason.'),\n  categorizedStatement: z.string()\n    .describe('The failure reason rephrased according to the identified category and its template.'),\n});\nexport type CategorizeFailureReasonOutput = z.infer<typeof CategorizeFailureReasonOutputSchema>;\n\nexport async function categorizeFailureReason(input: CategorizeFailureReasonInput): Promise<CategorizeFailureReasonOutput> {\n  return categorizeFailureReasonFlow(input);\n}\n\nconst categorizeFailureReasonPrompt = ai.definePrompt({\n  name: 'categorizeFailureReasonPrompt',\n  input: {schema: CategorizeFailureReasonInputSchema},\n  output: {schema: CategorizeFailureReasonOutputSchema},\n  prompt: `You are an AI assistant helping users process potential failures related to their goals.\nAnalyze the user's stated reason for potential failure and categorize it into one of the following three categories.\nThen, rephrase the failure reason according to the template for the identified category.\n\nCategories and Templates:\n\n1.  **POSSIBLE_OUTCOME**: The reason describes a potential external event or outcome that might occur.\n    *   Template: \"It is possible to fail because it is possible that [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'bad weather', rephrase to 'the weather will be bad']\"\n    *   Example Input: \"the project might get delayed\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that the project might get delayed\"\n    *   Example Input: \"I don't get the promotion\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that I won't get the promotion\"\n\n2.  **PAST_TRAIT**: The reason describes a personal trait, past behavior, or recurring pattern of the user.\n    *   Template: \"It is possible to fail because in the past I have been [trait/behavior from original reason, e.g., 'lazy', 'procrastinating', 'afraid to ask for help']\"\n    *   Example Input: \"I am lazy\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been lazy\"\n    *   Example Input: \"I tend to procrastinate\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have tended to procrastinate\"\n    *   Example Input: \"my usual fear of public speaking\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been afraid of public speaking\"\n\n\n3.  **ABSOLUTE_TRUTH**: The reason describes something the user perceives as an unchangeable fact, an absolute external barrier, or a deeply ingrained limiting belief, which they express as a feeling about the situation.\n    *   Template: \"It is possible to fail because I feel [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'the economy is bad', rephrase to 'the economy is bad'; if user says 'success is impossible for me', rephrase to 'success is impossible for me']\"\n    *   Example Input: \"the economy is bad\"\n    *   Example Output Statement: \"It is possible to fail because I feel the economy is bad\"\n    *   Example Input: \"success is impossible for me\"\n    *   Example Output Statement: \"It is possible to fail because I feel success is impossible for me\"\n    *   Example Input: \"There's not enough time in the day\"\n    *   Example Output Statement: \"It is possible to fail because I feel there's not enough time in the day\"\n\n\nUser's Failure Reason:\n{{{failureReason}}}\n\nReturn ONLY the identified category and the rephrased statement based on the templates.\nThe 'categorizedStatement' should be the rephrased version.\n`,\n  config: {\n    temperature: 0.3, // Lower temperature for more deterministic categorization\n  }\n});\n\nconst categorizeFailureReasonFlow = ai.defineFlow(\n  {\n    name: 'categorizeFailureReasonFlow',\n    inputSchema: CategorizeFailureReasonInputSchema,\n    outputSchema: CategorizeFailureReasonOutputSchema,\n  },\n  async (input) => {\n    const {output} = await categorizeFailureReasonPrompt(input);\n    if (!output) {\n      // Fallback or error handling if LLM doesn't return expected output\n      console.error(\"LLM did not return expected output for failure reason categorization.\");\n      // Return a default or throw an error\n      return { \n        category: 'ABSOLUTE_TRUTH', // Default category\n        categorizedStatement: `It is possible to fail because I feel ${input.failureReason}` // Default statement based on new rule\n      };\n    }\n    return output;\n  }\n);\n\n"],"names":[],"mappings":";;;;;IAyBsB","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/processing/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport type { JournalEntry } from '@/types';\nimport { suggestInsightKeywords, type SuggestInsightKeywordsOutput } from '@/ai/flows/suggest-insight-keywords-flow';\nimport { categorizeFailureReason, type CategorizeFailureReasonOutput } from '@/ai/flows/categorize-failure-reason-flow';\nimport { Loader2, Send, Lightbulb, AlertTriangle, CheckCircle, XCircle, MessageSquareHeart, Sparkles, Info, Target, ShieldCheck, RefreshCw, Heart, Star, ArrowLeft, ListChecks, Sun, Award, ListOrdered, HelpCircle, Workflow } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\n\n\nconst JOURNAL_HISTORY_KEY = 'reflectifyJournalHistory';\n\ntype ProcessType = 'impossibleToFail' | 'goalDesirability' | 'bestCaseScenario' | 'goalAchievementExperience' | 'bestCasePlusActions' | 'actionsCertainty' | 'detailedActionProcess';\n\nexport default function ProcessingPage() {\n  const [selectedProcessType, setSelectedProcessType] = useState<ProcessType | null>(null);\n\n  // States for 'impossibleToFail'\n  const [canGoalFail, setCanGoalFail] = useState<boolean | null>(null);\n  const [failureReason, setFailureReason] = useState<string>('');\n  const [leftHandText, setLeftHandText] = useState<string>('');\n  const [rightHandText, setRightHandText] = useState<string>('');\n  const [categorizedFailureOutput, setCategorizedFailureOutput] = useState<CategorizeFailureReasonOutput | null>(null);\n  const [showProcessingResults, setShowProcessingResults] = useState<boolean>(false);\n  const [isProcessingFailure, setIsProcessingFailure] = useState<boolean>(false);\n\n  // States for 'goalDesirability'\n  const [goalWantRating, setGoalWantRating] = useState<number>(10);\n  const [whyNotTenRatingReason, setWhyNotTenRatingReason] = useState<string>('');\n  const [goalWantReasons, setGoalWantReasons] = useState<string>('');\n\n  // States for 'bestCaseScenario' & 'bestCasePlusActions'\n  const [bestCaseScenarioText, setBestCaseScenarioText] = useState<string>('');\n  \n  // States for 'goalAchievementExperience'\n  const [goalAchievementExperienceText, setGoalAchievementExperienceText] = useState<string>('');\n\n  // States for 'bestCasePlusActions'\n  const [actionsListText, setActionsListText] = useState<string>('');\n  // actionsCertaintyWhyNotText is shared with 'actionsCertainty'\n\n  // States for 'actionsCertainty' & 'bestCasePlusActions'\n  const [actionsCertaintyWhyNotText, setActionsCertaintyWhyNotText] = useState<string>('');\n\n  // States for 'detailedActionProcess'\n  const [actionFeelingInitial, setActionFeelingInitial] = useState<string>('');\n  const [actionFeelingDesired, setActionFeelingDesired] = useState<string>('');\n  const [actionCharacteristicsNeeded, setActionCharacteristicsNeeded] = useState<string>('');\n  const [actionCharacteristicsWithout, setActionCharacteristicsWithout] = useState<string>('');\n  const [actionCharacteristicsWith, setActionCharacteristicsWith] = useState<string>('');\n  const [actionUnderstandingNeeded, setActionUnderstandingNeeded] = useState<string>('');\n  const [actionUnderstandingWithout, setActionUnderstandingWithout] = useState<string>('');\n  const [actionUnderstandingWith, setActionUnderstandingWith] = useState<string>('');\n  \n  // Common states\n  const [insightsText, setInsightsText] = useState<string>('');\n  const [goalImprovementText, setGoalImprovementText] = useState<string>('');\n  const [journalHistory, setJournalHistory] = useState<JournalEntry[]>([]);\n  const [isLoadingAi, setIsLoadingAi] = useState<boolean>(false); \n  const [suggestedKeywords, setSuggestedKeywords] = useState<string[] | null>(null);\n  const [isSuggestingKeywords, setIsSuggestingKeywords] = useState<boolean>(false);\n  \n  const { toast } = useToast();\n\n\n  useEffect(() => {\n    try {\n      const storedHistory = localStorage.getItem(JOURNAL_HISTORY_KEY);\n      if (storedHistory) {\n        const parsedHistory: JournalEntry[] = JSON.parse(storedHistory);\n        // Filter for entries that have any of the processing-specific fields populated\n        const processingEntries = parsedHistory.filter(\n          entry => entry.isFailProof === true || \n                   (entry.failureReason && entry.failureReason.trim() !== '') ||\n                   entry.goalWantRating !== undefined ||\n                   (entry.bestCaseScenarioText && entry.bestCaseScenarioText.trim() !== '') ||\n                   (entry.goalAchievementExperienceText && entry.goalAchievementExperienceText.trim() !== '') ||\n                   (entry.actionsListText && entry.actionsListText.trim() !== '') ||\n                   (entry.actionsCertaintyWhyNotText && entry.actionsCertaintyWhyNotText.trim() !== '') ||\n                   (entry.actionFeelingInitial && entry.actionFeelingInitial.trim() !== '') // Check one of the detailed fields\n        );\n        setJournalHistory(processingEntries);\n      }\n    } catch (error) {\n      console.error(\"Failed to load or filter journal history from localStorage:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Could not load your journal history.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n\n  const handleSetCanGoalFail = (value: boolean) => {\n    setCanGoalFail(value);\n    setSuggestedKeywords(null); \n    setShowProcessingResults(false);\n    setCategorizedFailureOutput(null);\n    setLeftHandText('');\n    setRightHandText('');\n\n    if (value === false) {\n      setFailureReason(''); \n      toast({\n        title: \"Goal Marked as Fail-Proof\",\n        description: \"Standard 10F Process section has been hidden. You now know it is impossible to fail.\",\n        variant: \"default\",\n      });\n    }\n  };\n\n\n  const handleFailureProcessing = useCallback(async () => {\n    if (!failureReason.trim()) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please describe how your goal could potentially fail.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsProcessingFailure(true);\n    setSuggestedKeywords(null);\n    setCategorizedFailureOutput(null);\n    setShowProcessingResults(false);\n\n    try {\n      const result = await categorizeFailureReason({ failureReason });\n      setCategorizedFailureOutput(result);\n      setLeftHandText(`${result.categorizedStatement}, inhale exhale.`);\n      setRightHandText(`Although ${result.categorizedStatement}, I still want my goal.`);\n      setShowProcessingResults(true);\n      toast({\n        title: 'Processing Complete',\n        description: '10F processing results are now available. Please reflect on your insights.',\n      });\n    } catch (error) {\n      console.error('Error categorizing failure reason:', error);\n      setLeftHandText(`It is possible to fail because ${failureReason}, inhale exhale.`);\n      setRightHandText(`Although it is possible to fail because ${failureReason}, I still want my goal.`);\n      setShowProcessingResults(true);\n      toast({\n        title: 'Processing Note',\n        description: 'Could not categorize failure reason with AI, using basic processing. Please reflect on your insights.',\n        variant: 'default',\n      });\n    } finally {\n      setIsProcessingFailure(false);\n    }\n  }, [failureReason, toast]);\n\n  const handleSuggestKeywords = useCallback(async () => {\n    if (!insightsText.trim()) {\n      toast({\n        title: 'Empty Insight',\n        description: 'Please write your insights before suggesting keywords.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsSuggestingKeywords(true);\n    setSuggestedKeywords(null);\n    try {\n      const result = await suggestInsightKeywords({ insightText: insightsText });\n      setSuggestedKeywords(result.keywords);\n      toast({\n        title: 'Keywords Suggested',\n        description: 'AI has suggested some keywords for your insight.',\n      });\n    } catch (error) {\n      console.error('Error suggesting keywords:', error);\n      toast({\n        title: 'Keyword Suggestion Error',\n        description: 'Could not get keyword suggestions. Please try again.',\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSuggestingKeywords(false);\n    }\n  }, [insightsText, toast]);\n\n  const handleJournalSubmit = useCallback(async () => {\n    if (selectedProcessType === null) {\n        toast({ title: 'No Process Selected', description: 'Please select a process to work on.', variant: 'default' });\n        return;\n    }\n\n    setIsLoadingAi(true);\n    try {\n      const newEntry: Partial<JournalEntry> = { \n        id: new Date().toISOString(),\n        date: new Date().toISOString(),\n        insightsText: insightsText.trim() ? insightsText.trim() : undefined,\n        goalImprovementText: goalImprovementText.trim() ? goalImprovementText.trim() : undefined,\n      };\n\n      if (selectedProcessType === 'impossibleToFail') {\n        if (canGoalFail === null) {\n            toast({ title: 'Incomplete Entry', description: 'Please select if your goal can potentially fail.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.isFailProof = canGoalFail === false ? true : undefined;\n        if (canGoalFail === true) {\n            if (!failureReason.trim() && showProcessingResults) {\n                 toast({ title: 'Incomplete Entry', description: 'Please describe how your goal could potentially fail if you have processed it.', variant: 'default' });\n                 setIsLoadingAi(false); return;\n            }\n            if (showProcessingResults && !insightsText.trim()) {\n                 toast({ title: 'Missing Insights', description: 'Please provide your insights and realizations from the failure processing.', variant: 'default' });\n                 setIsLoadingAi(false); return;\n            }\n            newEntry.failureReason = failureReason.trim() ? failureReason.trim() : undefined;\n            newEntry.leftHandText = leftHandText.trim() && showProcessingResults ? leftHandText.trim() : undefined;\n            newEntry.rightHandText = rightHandText.trim() && showProcessingResults ? rightHandText.trim() : undefined;\n            newEntry.failureCategory = showProcessingResults ? categorizedFailureOutput?.category : undefined;\n            newEntry.categorizedFailureStatement = showProcessingResults ? categorizedFailureOutput?.categorizedStatement : undefined;\n        }\n      } else if (selectedProcessType === 'goalDesirability') {\n        if (goalWantRating < 10 && !whyNotTenRatingReason.trim()) {\n            toast({ title: 'Missing Information', description: 'Please explain why your goal desirability is not a 10/10.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (goalWantRating < 10 && !goalWantReasons.trim()){\n            toast({ title: 'Missing Information', description: 'Please state your reasons for wanting this goal, as your desirability rating is less than 10/10.', variant: 'default'});\n            setIsLoadingAi(false); return;\n        }\n        if (goalWantRating < 10 && (whyNotTenRatingReason.trim() || goalWantReasons.trim()) && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for the goal desirability process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.goalWantRating = goalWantRating;\n        newEntry.whyNotTenRatingReason = goalWantRating < 10 ? whyNotTenRatingReason.trim() : undefined;\n        newEntry.goalWantReasons = goalWantRating < 10 ? goalWantReasons.trim() : undefined;\n      } else if (selectedProcessType === 'bestCaseScenario') {\n        if (!bestCaseScenarioText.trim()) {\n            toast({ title: 'Incomplete Entry', description: 'Please describe your best case scenario.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (bestCaseScenarioText.trim() && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for the best case scenario process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.bestCaseScenarioText = bestCaseScenarioText.trim();\n      } else if (selectedProcessType === 'goalAchievementExperience') {\n        if (!goalAchievementExperienceText.trim()) {\n            toast({ title: 'Incomplete Entry', description: 'Please describe your goal achievement experience.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (goalAchievementExperienceText.trim() && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for the goal achievement experience process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.goalAchievementExperienceText = goalAchievementExperienceText.trim();\n      } else if (selectedProcessType === 'bestCasePlusActions') {\n        if (!bestCaseScenarioText.trim() || !actionsListText.trim() || !actionsCertaintyWhyNotText.trim()) {\n             toast({ title: 'Incomplete Entry', description: 'Please fill all fields for the Best Case + Actions process.', variant: 'default' });\n             setIsLoadingAi(false); return;\n        }\n        if ((bestCaseScenarioText.trim() || actionsListText.trim() || actionsCertaintyWhyNotText.trim()) && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for this process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.bestCaseScenarioText = bestCaseScenarioText.trim();\n        newEntry.actionsListText = actionsListText.trim();\n        newEntry.actionsCertaintyWhyNotText = actionsCertaintyWhyNotText.trim();\n      } else if (selectedProcessType === 'actionsCertainty') {\n        if (!actionsCertaintyWhyNotText.trim()) {\n            toast({ title: 'Incomplete Entry', description: 'Please fill the field for the Actions Certainty process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (actionsCertaintyWhyNotText.trim() && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for this process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.actionsCertaintyWhyNotText = actionsCertaintyWhyNotText.trim();\n      } else if (selectedProcessType === 'detailedActionProcess') {\n        if (!actionFeelingInitial.trim() && !actionFeelingDesired.trim() && !actionCharacteristicsNeeded.trim() && !actionCharacteristicsWithout.trim() && !actionCharacteristicsWith.trim() && !actionUnderstandingNeeded.trim() && !actionUnderstandingWithout.trim() && !actionUnderstandingWith.trim() ) {\n             toast({ title: 'Incomplete Entry', description: 'Please fill at least one field for the Detailed Action Analysis process.', variant: 'default' });\n             setIsLoadingAi(false); return;\n        }\n         if ((actionFeelingInitial.trim() || actionFeelingDesired.trim() || actionCharacteristicsNeeded.trim() || actionCharacteristicsWithout.trim() || actionCharacteristicsWith.trim() || actionUnderstandingNeeded.trim() || actionUnderstandingWithout.trim() || actionUnderstandingWith.trim()) && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for this process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.actionFeelingInitial = actionFeelingInitial.trim() ? actionFeelingInitial.trim() : undefined;\n        newEntry.actionFeelingDesired = actionFeelingDesired.trim() ? actionFeelingDesired.trim() : undefined;\n        newEntry.actionCharacteristicsNeeded = actionCharacteristicsNeeded.trim() ? actionCharacteristicsNeeded.trim() : undefined;\n        newEntry.actionCharacteristicsWithout = actionCharacteristicsWithout.trim() ? actionCharacteristicsWithout.trim() : undefined;\n        newEntry.actionCharacteristicsWith = actionCharacteristicsWith.trim() ? actionCharacteristicsWith.trim() : undefined;\n        newEntry.actionUnderstandingNeeded = actionUnderstandingNeeded.trim() ? actionUnderstandingNeeded.trim() : undefined;\n        newEntry.actionUnderstandingWithout = actionUnderstandingWithout.trim() ? actionUnderstandingWithout.trim() : undefined;\n        newEntry.actionUnderstandingWith = actionUnderstandingWith.trim() ? actionUnderstandingWith.trim() : undefined;\n      }\n      \n      newEntry.entryText = ''; \n\n      setJournalHistory(prevHistory => {\n         const updatedHistory = [newEntry as JournalEntry, ...prevHistory.filter(\n            entry => entry.isFailProof === true || \n                     (entry.failureReason && entry.failureReason.trim() !== '') || \n                     entry.goalWantRating !== undefined ||\n                     (entry.bestCaseScenarioText && entry.bestCaseScenarioText.trim() !== '') ||\n                     (entry.goalAchievementExperienceText && entry.goalAchievementExperienceText.trim() !== '') ||\n                     (entry.actionsListText && entry.actionsListText.trim() !== '') ||\n                     (entry.actionsCertaintyWhyNotText && entry.actionsCertaintyWhyNotText.trim() !== '') ||\n                     (entry.actionFeelingInitial && entry.actionFeelingInitial.trim() !== '')\n        )];\n        try {\n          localStorage.setItem(JOURNAL_HISTORY_KEY, JSON.stringify(updatedHistory));\n        } catch (error) {\n          console.error(\"Failed to save journal history to localStorage:\", error);\n          toast({ title: \"Storage Error\", description: \"Could not save your journal entry due to storage limitations.\", variant: \"destructive\" });\n        }\n        return updatedHistory;\n      });\n\n      resetAllFields();\n\n      toast({\n        title: 'Progress Saved',\n        description: 'Your processing details have been recorded.',\n      });\n    } catch (error) {\n      console.error('Error saving processing entry:', error);\n      toast({ title: 'Error', description: 'Could not save your processing entry. Please try again.', variant: \"destructive\" });\n    } finally {\n      setIsLoadingAi(false);\n    }\n  }, [\n    toast, selectedProcessType, canGoalFail, failureReason, leftHandText, rightHandText, insightsText, \n    goalImprovementText, showProcessingResults, categorizedFailureOutput, journalHistory, \n    goalWantRating, whyNotTenRatingReason, goalWantReasons, bestCaseScenarioText, goalAchievementExperienceText,\n    actionsListText, actionsCertaintyWhyNotText, actionFeelingInitial, actionFeelingDesired, \n    actionCharacteristicsNeeded, actionCharacteristicsWithout, actionCharacteristicsWith,\n    actionUnderstandingNeeded, actionUnderstandingWithout, actionUnderstandingWith\n  ]);\n\n  const getCategoryDescription = (category?: string) => {\n    if (!category) return null;\n    switch (category) {\n      case 'POSSIBLE_OUTCOME':\n        return 'This failure reason seems to relate to a potential external event or outcome.';\n      case 'PAST_TRAIT':\n        return 'This failure reason seems to relate to a personal trait or past behavior.';\n      case 'ABSOLUTE_TRUTH':\n        return 'This failure reason seems to relate to a perceived unchangeable fact or limiting belief.';\n      default:\n        return null;\n    }\n  };\n  \n  const resetAllFields = (keepProcessSelection = false) => {\n    if (!keepProcessSelection) {\n        setSelectedProcessType(null);\n    }\n    // Impossible to Fail\n    setCanGoalFail(null);\n    setFailureReason('');\n    setLeftHandText('');\n    setRightHandText('');\n    setShowProcessingResults(false);\n    setCategorizedFailureOutput(null);\n\n    // Goal Desirability\n    setGoalWantRating(10);\n    setWhyNotTenRatingReason('');\n    setGoalWantReasons('');\n\n    // Best Case & Goal Achievement\n    setBestCaseScenarioText('');\n    setGoalAchievementExperienceText('');\n\n    // Best Case + Actions & Actions Certainty\n    setActionsListText('');\n    setActionsCertaintyWhyNotText('');\n\n    // Detailed Action Process\n    setActionFeelingInitial('');\n    setActionFeelingDesired('');\n    setActionCharacteristicsNeeded('');\n    setActionCharacteristicsWithout('');\n    setActionCharacteristicsWith('');\n    setActionUnderstandingNeeded('');\n    setActionUnderstandingWithout('');\n    setActionUnderstandingWith('');\n\n    // Common\n    setInsightsText('');\n    setGoalImprovementText('');\n    setSuggestedKeywords(null);\n    \n    if (!keepProcessSelection) {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }\n\n  const renderReflectionSection = () => (\n    <>\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <MessageSquareHeart className=\"mr-2 h-6 w-6 text-primary\"/> Insights and Realizations\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Is there something you could conclude about this process, about possibilities for its achievement? (Usually something about how you could resolve that barrier). This is the user&apos;s most important part!\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Label htmlFor=\"insightsText\" className=\"text-base\">Your Insights:</Label>\n                <Textarea\n                    id=\"insightsText\"\n                    value={insightsText}\n                    onChange={(e) => {\n                      setInsightsText(e.target.value);\n                      setSuggestedKeywords(null); \n                    }}\n                    placeholder=\"e.g., I realize I can break down the cost, or seek alternative cheaper solutions...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n                <div className=\"mt-4 space-y-3\">\n                    <Button\n                        onClick={handleSuggestKeywords}\n                        disabled={isSuggestingKeywords || !insightsText.trim()}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-sm\"\n                    >\n                        {isSuggestingKeywords ? (\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        ) : (\n                            <Sparkles className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Suggest Keywords\n                    </Button>\n                    {suggestedKeywords && suggestedKeywords.length > 0 && (\n                        <div className=\"p-3 bg-muted/50 rounded-md border\">\n                            <h5 className=\"text-sm font-semibold mb-2 text-foreground\">Suggested Keywords:</h5>\n                            <div className=\"flex flex-wrap gap-2\">\n                                {suggestedKeywords.map((keyword, index) => (\n                                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                        {keyword}\n                                    </Badge>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <Target className=\"mr-2 h-6 w-6 text-primary\"/> Goal Improvement\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Does the process you did suggest some improvements or better definition of your goal? Should you add something, remove something or change something to make it more attractive and better defined?\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Label htmlFor=\"goalImprovementText\" className=\"text-base\">Your Goal Improvements:</Label>\n                <Textarea\n                    id=\"goalImprovementText\"\n                    value={goalImprovementText}\n                    onChange={(e) => setGoalImprovementText(e.target.value)}\n                    placeholder=\"e.g., I could redefine my goal to be more specific about the timeline, or add smaller milestones...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n            </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden border-primary\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                    <RefreshCw className=\"mr-2 h-6 w-6 text-primary\"/> Repeat the Process\n                </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-2 space-y-3\">\n                <p className=\"text-base text-foreground\">\n                    Return to point 1. Identification of the next barrier which makes you retreat from your goal, and repeat the process until you know it is impossible to fail.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                    Usually this takes students 3-7 processes to achieve.\n                </p>\n                 <Button \n                    variant={'outline'} \n                    onClick={() => {\n                        resetAllFields();\n                        toast({\n                            title: \"Process Reset\",\n                            description: \"You can now select a new process or re-evaluate the current one from the start.\",\n                        });\n                    }}\n                    className=\"mt-2\"\n                >\n                    <RefreshCw className=\"mr-2 h-4 w-4\" /> Start New Process Iteration\n                </Button>\n            </CardContent>\n        </Card>\n    </>\n  );\n\n  const isSaveButtonDisabled = () => {\n    if (isLoadingAi || selectedProcessType === null) return true;\n\n    if (selectedProcessType === 'impossibleToFail') {\n        if (canGoalFail === null) return true;\n        if (canGoalFail === true) { \n            if (!failureReason.trim() && showProcessingResults) return true; \n            if (showProcessingResults && !insightsText.trim()) return true; \n        }\n        return false; \n    }\n\n    if (selectedProcessType === 'goalDesirability') {\n        if (goalWantRating < 10 && !whyNotTenRatingReason.trim()) return true;\n        if (goalWantRating < 10 && !goalWantReasons.trim()) return true;\n        if (goalWantRating < 10 && (whyNotTenRatingReason.trim() || goalWantReasons.trim()) && !insightsText.trim()) return true;\n        return false;\n    }\n\n    if (selectedProcessType === 'bestCaseScenario') {\n        if (!bestCaseScenarioText.trim()) return true;\n        if (bestCaseScenarioText.trim() && !insightsText.trim()) return true;\n        return false;\n    }\n\n    if (selectedProcessType === 'goalAchievementExperience') {\n        if (!goalAchievementExperienceText.trim()) return true;\n        if (goalAchievementExperienceText.trim() && !insightsText.trim()) return true;\n        return false;\n    }\n\n    if (selectedProcessType === 'bestCasePlusActions') {\n        if (!bestCaseScenarioText.trim() || !actionsListText.trim() || !actionsCertaintyWhyNotText.trim()) return true;\n        if ((bestCaseScenarioText.trim() || actionsListText.trim() || actionsCertaintyWhyNotText.trim()) && !insightsText.trim()) return true;\n        return false;\n    }\n\n    if (selectedProcessType === 'actionsCertainty') {\n        if (!actionsCertaintyWhyNotText.trim()) return true;\n        if (actionsCertaintyWhyNotText.trim() && !insightsText.trim()) return true;\n        return false;\n    }\n    \n    if (selectedProcessType === 'detailedActionProcess') {\n        if (!actionFeelingInitial.trim() && !actionFeelingDesired.trim() && !actionCharacteristicsNeeded.trim() && !actionCharacteristicsWithout.trim() && !actionCharacteristicsWith.trim() && !actionUnderstandingNeeded.trim() && !actionUnderstandingWithout.trim() && !actionUnderstandingWith.trim() ) return true; // if all empty, disable\n        if ((actionFeelingInitial.trim() || actionFeelingDesired.trim() || actionCharacteristicsNeeded.trim() || actionCharacteristicsWithout.trim() || actionCharacteristicsWith.trim() || actionUnderstandingNeeded.trim() || actionUnderstandingWithout.trim() || actionUnderstandingWith.trim()) && !insightsText.trim()) return true; // if any filled but no insights, disable\n        return false;\n    }\n\n    return true; \n  };\n\n  const getSaveButtonText = () => {\n    if (selectedProcessType === 'impossibleToFail' && canGoalFail === false) return \"Save Status\";\n    if (selectedProcessType === 'bestCaseScenario') return \"Save Best Case\";\n    if (selectedProcessType === 'goalAchievementExperience') return \"Save Experience\";\n    if (selectedProcessType === 'bestCasePlusActions') return \"Save Scenario & Actions\";\n    if (selectedProcessType === 'actionsCertainty') return \"Save Certainty Analysis\";\n    if (selectedProcessType === 'detailedActionProcess') return \"Save Action Analysis\";\n    return \"Save Progress\";\n  };\n\n\n  return (\n    <div className=\"container mx-auto max-w-3xl py-8 px-4 flex flex-col gap-8\">\n      {selectedProcessType === null ? (\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader className=\"bg-card\">\n            <CardTitle className=\"text-2xl font-semibold text-foreground flex items-center\">\n              <ListChecks className=\"mr-3 h-7 w-7 text-primary\"/>Choose Your Focus\n            </CardTitle>\n            <CardDescription className=\"text-base text-muted-foreground pt-2\">\n              Select which aspect of your goal you&apos;d like to process. You can switch or repeat processes as needed.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6 grid grid-cols-1 sm:grid-cols-1 gap-4\">\n            <Button \n              onClick={() => { setSelectedProcessType('impossibleToFail'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <ShieldCheck className=\"mr-3 h-6 w-6\" /> Impossible to Fail Process\n            </Button>\n            <Button \n              onClick={() => { setSelectedProcessType('goalDesirability'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <Heart className=\"mr-3 h-6 w-6\" /> Goal Desirability Process\n            </Button>\n            <Button \n              onClick={() => { setSelectedProcessType('bestCaseScenario'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <Sun className=\"mr-3 h-6 w-6\" /> Best Case Scenario Process\n            </Button>\n            <Button \n              onClick={() => { setSelectedProcessType('goalAchievementExperience'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <Award className=\"mr-3 h-6 w-6\" /> Goal Achievement Experience Process\n            </Button>\n             <Button \n              onClick={() => { setSelectedProcessType('bestCasePlusActions'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <ListOrdered className=\"mr-3 h-6 w-6\" /> Best Case + Actions Process\n            </Button>\n            <Button \n              onClick={() => { setSelectedProcessType('actionsCertainty'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <HelpCircle className=\"mr-3 h-6 w-6\" /> Actions Certainty Process\n            </Button>\n            <Button \n              onClick={() => { setSelectedProcessType('detailedActionProcess'); resetAllFields(true);}} \n              size=\"lg\" \n              className=\"py-6 text-lg justify-start pl-4\"\n              variant=\"outline\"\n            >\n              <Workflow className=\"mr-3 h-6 w-6\" /> Detailed Action Analysis\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          <div className=\"flex justify-start mb-0\">\n            <Button variant=\"outline\" onClick={() => resetAllFields()} size=\"sm\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Process Selection\n            </Button>\n          </div>\n\n          {/* Impossible to Fail Process */}\n          {selectedProcessType === 'impossibleToFail' && (\n            <>\n              <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-primary/30\">\n                  <CardTitle className=\"text-xl font-semibold text-primary-foreground\">\n                    Impossible to fail\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-3\">\n                    <p className=\"text-foreground text-base\">\n                      Pay attention to your goal, is it possible to fail?\n                    </p>\n                    <div className=\"flex flex-wrap gap-4 pt-1\">\n                      <Button \n                        variant={canGoalFail === true ? 'default' : 'outline'} \n                        onClick={() => handleSetCanGoalFail(true)}\n                        className=\"flex-grow sm:flex-grow-0\"\n                      >\n                        <XCircle className=\"mr-2 h-5 w-5\" /> Yes, failure is possible\n                      </Button>\n                      <Button \n                        variant={canGoalFail === false ? 'default' : 'outline'} \n                        onClick={() => handleSetCanGoalFail(false)}\n                        className={cn(\n                          \"flex-grow sm:flex-grow-0\",\n                          canGoalFail === false && \"!bg-accent !text-accent-foreground hover:!bg-accent/90\"\n                        )}\n                      >\n                        <CheckCircle className=\"mr-2 h-5 w-5\" /> No, it&apos;s fail-proof\n                      </Button>\n                    </div>\n                </CardContent>\n              </Card>\n\n              {canGoalFail === true && (\n                <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                  <CardHeader>\n                    <CardTitle className=\"text-xl font-semibold text-foreground\">\n                      Standard 10F Process\n                    </CardTitle>\n                    <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                      If your goal could fail, describe how that might happen.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-6 space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"failureReason\" className=\"text-base\">How could your goal potentially fail?</Label>\n                      <Textarea\n                        id=\"failureReason\"\n                        value={failureReason}\n                        onChange={(e) => {\n                          setFailureReason(e.target.value);\n                          setShowProcessingResults(false); \n                          setCategorizedFailureOutput(null);\n                        }}\n                        placeholder=\"e.g., It is too expensive, I might lose motivation, unexpected events, I am lazy...\"\n                        rows={3}\n                        className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                      />\n                    </div>\n                    <Button \n                      onClick={handleFailureProcessing} \n                      disabled={isProcessingFailure || !failureReason.trim()}\n                      className=\"w-full sm:w-auto bg-accent text-accent-foreground hover:bg-accent/90 focus-visible:ring-ring px-6 py-3 text-base\"\n                      aria-label=\"Process Potential Failure Mode\"\n                    >\n                      {isProcessingFailure ? (\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                      ) : (\n                        <Lightbulb className=\"mr-2 h-5 w-5\" />\n                      )}\n                      Process Potential Failure\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n\n              {canGoalFail === false && (\n                 <Card className=\"shadow-lg rounded-xl overflow-hidden border-accent\">\n                    <CardHeader>\n                      <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                        <ShieldCheck className=\"mr-2 h-6 w-6 text-accent\" /> Goal Confidence\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-2\">\n                      <p className=\"text-base text-foreground\">\n                        Great! You now know your goal is impossible to fail.\n                      </p>\n                    </CardContent>\n                  </Card>\n              )}\n\n              {showProcessingResults && canGoalFail === true && (\n                <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                  <CardHeader>\n                    <CardTitle className=\"text-xl font-semibold text-foreground\">10F Processing Results</CardTitle>\n                    <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                      Reflect on these statements to strengthen your resolve.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-6 space-y-6\">\n                    {categorizedFailureOutput?.category && (\n                      <div className=\"p-3 bg-primary/10 rounded-md border border-primary/30 text-sm text-primary-foreground flex items-start gap-2\">\n                        <Info className=\"h-5 w-5 mt-0.5 shrink-0\" />\n                        <p><span className=\"font-semibold\">Categorization:</span> {getCategoryDescription(categorizedFailureOutput.category)}</p>\n                      </div>\n                    )}\n                    <h4 className=\"text-lg font-semibold text-foreground\">Do the 10F processing:</h4>\n                    <Card className=\"bg-card border-destructive/50\">\n                      <CardHeader>\n                        <CardTitle className=\"text-md font-semibold text-destructive flex items-center\">\n                          <AlertTriangle className=\"mr-2 h-5 w-5 text-destructive\" /> Left Hand Focus\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-base text-foreground\">{leftHandText}</p>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-card border-accent/50\">\n                      <CardHeader>\n                        <CardTitle className=\"text-md font-semibold text-accent-foreground flex items-center\">\n                          <Lightbulb className=\"mr-2 h-5 w-5 text-accent\" /> Right Hand Affirmation\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-base text-foreground\">{rightHandText}</p>\n                      </CardContent>\n                    </Card>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n\n          {/* Goal Desirability Process */}\n          {selectedProcessType === 'goalDesirability' && (\n            <>\n              <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-secondary/30\">\n                  <CardTitle className=\"text-xl font-semibold text-secondary-foreground flex items-center\">\n                    <Heart className=\"mr-3 h-6 w-6\"/>Goal Desirability\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"goalWantRating\" className=\"text-base\">From 0-10, how much do you want your goal?</Label>\n                    <div className=\"flex items-center gap-4\">\n                      <Slider\n                        id=\"goalWantRating\"\n                        min={0}\n                        max={10}\n                        step={1}\n                        value={[goalWantRating]}\n                        onValueChange={(value) => setGoalWantRating(value[0])}\n                        className=\"flex-grow\"\n                        aria-label=\"Goal want rating slider\"\n                      />\n                      <span className=\"text-base font-medium w-10 text-right text-foreground\">{goalWantRating}</span>\n                    </div>\n                  </div>\n\n                  {goalWantRating < 10 && (\n                    <>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"whyNotTenRatingReason\" className=\"text-base\">Why is it not 10/10?</Label>\n                        <Textarea\n                          id=\"whyNotTenRatingReason\"\n                          value={whyNotTenRatingReason}\n                          onChange={(e) => setWhyNotTenRatingReason(e.target.value)}\n                          placeholder=\"e.g., I have some doubts, it requires a lot of effort...\"\n                          rows={3}\n                          className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"goalWantReasons\" className=\"text-base\">Reason(s) for wanting your goal (one or two):</Label>\n                        <Textarea\n                          id=\"goalWantReasons\"\n                          value={goalWantReasons}\n                          onChange={(e) => setGoalWantReasons(e.target.value)}\n                          placeholder=\"e.g., It will improve my health, It will bring me joy...\"\n                          rows={3}\n                          className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                        />\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {goalWantRating === 10 && selectedProcessType === 'goalDesirability' && (\n                <Card className=\"shadow-lg rounded-xl overflow-hidden border-accent\">\n                    <CardHeader>\n                      <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                        <Star className=\"mr-2 h-6 w-6 text-accent\" /> Goal Commitment\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-2\">\n                      <p className=\"text-base text-foreground\">\n                        Great! You know you want your goal 100%!\n                      </p>\n                    </CardContent>\n                  </Card>\n              )}\n            </>\n          )}\n\n          {/* Best Case Scenario Process */}\n          {selectedProcessType === 'bestCaseScenario' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-accent/10\">\n                <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                  <Sun className=\"mr-3 h-6 w-6\"/>Best Case Scenario\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Envision the most positive outcome for your goal. How does it look and feel?\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bestCaseScenarioText\" className=\"text-base\">Describe your best case scenario for this goal:</Label>\n                  <Textarea\n                    id=\"bestCaseScenarioText\"\n                    value={bestCaseScenarioText}\n                    onChange={(e) => setBestCaseScenarioText(e.target.value)}\n                    placeholder=\"e.g., I achieve my goal effortlessly, new opportunities open up, I feel immense joy and satisfaction...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Goal Achievement Experience Process */}\n          {selectedProcessType === 'goalAchievementExperience' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-primary/10\">\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                  <Award className=\"mr-3 h-6 w-6\"/>Goal Achievement Experience\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Imagine you have successfully achieved your goal. Describe this experience in detail. What do you see, hear, feel?\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"goalAchievementExperienceText\" className=\"text-base\">Describe your goal achievement experience:</Label>\n                  <Textarea\n                    id=\"goalAchievementExperienceText\"\n                    value={goalAchievementExperienceText}\n                    onChange={(e) => setGoalAchievementExperienceText(e.target.value)}\n                    placeholder=\"e.g., I feel a wave of accomplishment and pride. I'm celebrating with friends and family. This opens doors to...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Best Case Scenario + List of Actions Process */}\n          {selectedProcessType === 'bestCasePlusActions' && (\n            <>\n              <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-accent/10\">\n                  <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                    <ListOrdered className=\"mr-3 h-6 w-6\"/>Best Case Scenario + Actions\n                  </CardTitle>\n                  <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Envision your best outcome, list actions, and assess your certainty.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bestCaseScenarioTextPlusActions\" className=\"text-base\">Describe your best case scenario for this goal:</Label>\n                    <Textarea\n                      id=\"bestCaseScenarioTextPlusActions\"\n                      value={bestCaseScenarioText}\n                      onChange={(e) => setBestCaseScenarioText(e.target.value)}\n                      placeholder=\"e.g., I achieve my goal effortlessly...\"\n                      rows={3}\n                      className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"actionsListText\" className=\"text-base\">List the actions to take:</Label>\n                    <Textarea\n                      id=\"actionsListText\"\n                      value={actionsListText}\n                      onChange={(e) => setActionsListText(e.target.value)}\n                      placeholder=\"e.g., 1. Research options. 2. Make a plan. 3. Execute step 1...\"\n                      rows={4}\n                      className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"actionsCertaintyWhyNotTextBPA\" className=\"text-base\">If I take all the actions included, am I absolutely certain my actions will get to my goal? Why not?</Label>\n                    <Textarea\n                      id=\"actionsCertaintyWhyNotTextBPA\"\n                      value={actionsCertaintyWhyNotText}\n                      onChange={(e) => setActionsCertaintyWhyNotText(e.target.value)}\n                      placeholder=\"e.g., External factors, unexpected delays, resource limitations...\"\n                      rows={3}\n                      className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n\n          {/* Actions Certainty Process */}\n          {selectedProcessType === 'actionsCertainty' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-secondary/30\">\n                <CardTitle className=\"text-xl font-semibold text-secondary-foreground flex items-center\">\n                  <HelpCircle className=\"mr-3 h-6 w-6\"/>Actions Certainty\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Evaluate your confidence in your planned actions.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionsCertaintyWhyNotTextAC\" className=\"text-base\">If I take all the actions included, am I absolutely certain my actions will get to my goal? Why not?</Label>\n                  <Textarea\n                    id=\"actionsCertaintyWhyNotTextAC\"\n                    value={actionsCertaintyWhyNotText}\n                    onChange={(e) => setActionsCertaintyWhyNotText(e.target.value)}\n                    placeholder=\"e.g., Potential obstacles, skill gaps, market changes...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Detailed Action Analysis Process */}\n          {selectedProcessType === 'detailedActionProcess' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-primary/10\">\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                  <Workflow className=\"mr-3 h-6 w-6\"/>Detailed Action Analysis\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Deep dive into a specific action: feelings, characteristics, and understanding.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionFeelingInitial\" className=\"text-base\">How will I feel going into this action?</Label>\n                  <Textarea\n                    id=\"actionFeelingInitial\"\n                    value={actionFeelingInitial}\n                    onChange={(e) => setActionFeelingInitial(e.target.value)}\n                    placeholder=\"e.g., Anxious, excited, overwhelmed...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionFeelingDesired\" className=\"text-base\">How would I like to feel instead?</Label>\n                  <Textarea\n                    id=\"actionFeelingDesired\"\n                    value={actionFeelingDesired}\n                    onChange={(e) => setActionFeelingDesired(e.target.value)}\n                    placeholder=\"e.g., Confident, calm, focused...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                 <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionCharacteristicsNeeded\" className=\"text-base\">What characteristic(s) will I need to perform this action optimally?</Label>\n                  <Textarea\n                    id=\"actionCharacteristicsNeeded\"\n                    value={actionCharacteristicsNeeded}\n                    onChange={(e) => setActionCharacteristicsNeeded(e.target.value)}\n                    placeholder=\"e.g., Discipline, creativity, patience...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionCharacteristicsWithout\" className=\"text-base\">How will it be like if I don&apos;t have this characteristic(s)?</Label>\n                  <Textarea\n                    id=\"actionCharacteristicsWithout\"\n                    value={actionCharacteristicsWithout}\n                    onChange={(e) => setActionCharacteristicsWithout(e.target.value)}\n                    placeholder=\"e.g., Struggle, make mistakes, give up...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionCharacteristicsWith\" className=\"text-base\">How will it be if I do?</Label>\n                  <Textarea\n                    id=\"actionCharacteristicsWith\"\n                    value={actionCharacteristicsWith}\n                    onChange={(e) => setActionCharacteristicsWith(e.target.value)}\n                    placeholder=\"e.g., Smooth progress, enjoy the process, achieve better results...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                 <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionUnderstandingNeeded\" className=\"text-base\">What would I need to understand to perform this action optimally?</Label>\n                  <Textarea\n                    id=\"actionUnderstandingNeeded\"\n                    value={actionUnderstandingNeeded}\n                    onChange={(e) => setActionUnderstandingNeeded(e.target.value)}\n                    placeholder=\"e.g., The steps involved, potential challenges, the underlying principles...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionUnderstandingWithout\" className=\"text-base\">How would it be if I don&apos;t understand that?</Label>\n                  <Textarea\n                    id=\"actionUnderstandingWithout\"\n                    value={actionUnderstandingWithout}\n                    onChange={(e) => setActionUnderstandingWithout(e.target.value)}\n                    placeholder=\"e.g., Confusion, inefficiency, frustration...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionUnderstandingWith\" className=\"text-base\">How would it be if I did?</Label>\n                  <Textarea\n                    id=\"actionUnderstandingWith\"\n                    value={actionUnderstandingWith}\n                    onChange={(e) => setActionUnderstandingWith(e.target.value)}\n                    placeholder=\"e.g., Clarity, effectiveness, adaptability...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Common Reflection and Improvement Sections - Rendered if applicable */}\n          {((selectedProcessType === 'impossibleToFail' && showProcessingResults && canGoalFail === true) || \n            (selectedProcessType === 'goalDesirability' && goalWantRating < 10 && (whyNotTenRatingReason.trim() || goalWantReasons.trim())) ||\n            (selectedProcessType === 'bestCaseScenario' && bestCaseScenarioText.trim()) ||\n            (selectedProcessType === 'goalAchievementExperience' && goalAchievementExperienceText.trim()) ||\n            (selectedProcessType === 'bestCasePlusActions' && (bestCaseScenarioText.trim() || actionsListText.trim() || actionsCertaintyWhyNotText.trim())) ||\n            (selectedProcessType === 'actionsCertainty' && actionsCertaintyWhyNotText.trim()) ||\n            (selectedProcessType === 'detailedActionProcess' && (actionFeelingInitial.trim() || actionFeelingDesired.trim() || actionCharacteristicsNeeded.trim() || actionCharacteristicsWithout.trim() || actionCharacteristicsWith.trim() || actionUnderstandingNeeded.trim() || actionUnderstandingWithout.trim() || actionUnderstandingWith.trim()))\n            ) &&\n            renderReflectionSection()\n          }\n      \n          <div className=\"mt-6 flex justify-center\">\n            <Button \n                onClick={handleJournalSubmit} \n                disabled={isSaveButtonDisabled()}\n                className=\"w-full sm:w-auto bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-2 px-8 py-3 text-lg rounded-lg shadow-md transition-all duration-150 ease-in-out hover:shadow-lg\"\n                aria-label={getSaveButtonText()}\n                size=\"lg\"\n            >\n              {isLoadingAi ? (\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              ) : (\n                  <>\n                      <Send className=\"mr-2 h-5 w-5\" />\n                      {getSaveButtonText()}\n                  </>\n              )}\n            </Button>\n          </div>\n        </>\n      )}\n\n\n      <div className=\"mt-8 text-center\">\n        <Button variant=\"link\" asChild>\n          <Link href=\"/\">Back to Main Journal Page</Link>\n        </Button>\n         <Button variant=\"link\" asChild className=\"ml-4\">\n          <Link href=\"/history\">View History</Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}