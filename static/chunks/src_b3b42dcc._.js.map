{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/slider.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;0BAET,6LAAC,qKAAA,CAAA,QAAqB;gBAAC,WAAU;0BAC/B,cAAA,6LAAC,qKAAA,CAAA,QAAqB;oBAAC,WAAU;;;;;;;;;;;0BAEnC,6LAAC,qKAAA,CAAA,QAAqB;gBAAC,WAAU;;;;;;;;;;;;;AAGrC,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/reflectify/JournalEditor.tsx"],"sourcesContent":["'use client';\nimport type { FC } from 'react';\nimport { Textarea } from '@/components/ui/textarea';\n\ninterface JournalEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  isLoading?: boolean; // Optional, if specific loading state for textarea is needed\n}\n\nconst JournalEditor: FC<JournalEditorProps> = ({ value, onChange, isLoading }) => {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <Textarea\n        placeholder=\"Pour your thoughts here... What's on your mind?\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        rows={8} // Adjusted rows\n        className=\"resize-none text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n        aria-label=\"Journaling Space\"\n        disabled={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default JournalEditor;\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAUA,MAAM,gBAAwC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IAC3E,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,uIAAA,CAAA,WAAQ;YACP,aAAY;YACZ,OAAO;YACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;YACxC,MAAM;YACN,WAAU;YACV,cAAW;YACX,UAAU;;;;;;;;;;;AAIlB;KAdM;uCAgBS","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/reflectify/SentimentDisplay.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { TrendingUp, TrendingDown, MinusCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface SentimentDisplayProps {\n  sentiment?: string;\n  score?: number;\n}\n\nconst SentimentDisplay: FC<SentimentDisplayProps> = ({ sentiment, score }) => {\n  if (sentiment === undefined || score === undefined) {\n    return <p className=\"text-muted-foreground\">Sentiment analysis not available yet.</p>;\n  }\n\n  let sentimentIcon;\n  let badgeVariant: \"default\" | \"destructive\" | \"secondary\" = \"secondary\";\n  let scoreColorClass = \"text-foreground\"; \n  let iconColorClass = \"text-muted-foreground\";\n\n  if (sentiment.toLowerCase() === 'positive') {\n    iconColorClass = \"text-accent\";\n    sentimentIcon = <TrendingUp className={cn(\"mr-2 h-5 w-5\", iconColorClass)} />;\n    badgeVariant = \"default\"; \n    scoreColorClass = \"text-accent\";\n  } else if (sentiment.toLowerCase() === 'negative') {\n    iconColorClass = \"text-destructive\";\n    sentimentIcon = <TrendingDown className={cn(\"mr-2 h-5 w-5\", iconColorClass)} />;\n    badgeVariant = \"destructive\";\n    scoreColorClass = \"text-destructive\";\n  } else { // Neutral\n    iconColorClass = \"text-muted-foreground\"; \n    sentimentIcon = <MinusCircle className={cn(\"mr-2 h-5 w-5\", iconColorClass)} />;\n    badgeVariant = \"secondary\";\n    scoreColorClass = \"text-foreground\"; \n  }\n  \n  const badgeStyle = sentiment.toLowerCase() === 'positive' \n    ? { backgroundColor: 'hsl(var(--accent))', color: 'hsl(var(--accent-foreground))' } \n    : {};\n\n\n  return (\n    <div className=\"flex flex-col sm:flex-row sm:items-center gap-4 p-4 bg-card rounded-lg shadow\">\n      <div className=\"flex items-center\">\n        {sentimentIcon}\n        <Badge variant={badgeVariant} style={badgeStyle} className=\"text-sm capitalize px-3 py-1\">\n          {sentiment}\n        </Badge>\n      </div>\n      <div className=\"flex items-baseline gap-2\">\n        <span className=\"text-sm text-muted-foreground\">Sentiment Score:</span>\n        <span className={cn(\"text-lg font-semibold\", scoreColorClass)}>\n          {score.toFixed(2)}\n        </span>\n         <span className=\"text-xs text-muted-foreground\"> (from -1 to 1)</span>\n      </div>\n    </div>\n  );\n};\n\nexport default SentimentDisplay;\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AAAA;AACA;;;;;AAOA,MAAM,mBAA8C,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE;IACvE,IAAI,cAAc,aAAa,UAAU,WAAW;QAClD,qBAAO,6LAAC;YAAE,WAAU;sBAAwB;;;;;;IAC9C;IAEA,IAAI;IACJ,IAAI,eAAwD;IAC5D,IAAI,kBAAkB;IACtB,IAAI,iBAAiB;IAErB,IAAI,UAAU,WAAW,OAAO,YAAY;QAC1C,iBAAiB;QACjB,8BAAgB,6LAAC,qNAAA,CAAA,aAAU;YAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,gBAAgB;;;;;;QAC1D,eAAe;QACf,kBAAkB;IACpB,OAAO,IAAI,UAAU,WAAW,OAAO,YAAY;QACjD,iBAAiB;QACjB,8BAAgB,6LAAC,yNAAA,CAAA,eAAY;YAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,gBAAgB;;;;;;QAC5D,eAAe;QACf,kBAAkB;IACpB,OAAO;QACL,iBAAiB;QACjB,8BAAgB,6LAAC,uNAAA,CAAA,cAAW;YAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,gBAAgB;;;;;;QAC3D,eAAe;QACf,kBAAkB;IACpB;IAEA,MAAM,aAAa,UAAU,WAAW,OAAO,aAC3C;QAAE,iBAAiB;QAAsB,OAAO;IAAgC,IAChF,CAAC;IAGL,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;oBACZ;kCACD,6LAAC,oIAAA,CAAA,QAAK;wBAAC,SAAS;wBAAc,OAAO;wBAAY,WAAU;kCACxD;;;;;;;;;;;;0BAGL,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAK,WAAU;kCAAgC;;;;;;kCAChD,6LAAC;wBAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,yBAAyB;kCAC1C,MAAM,OAAO,CAAC;;;;;;kCAEhB,6LAAC;wBAAK,WAAU;kCAAgC;;;;;;;;;;;;;;;;;;AAIzD;KAjDM;uCAmDS","debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 914, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/reflectify/ProgressChart.tsx"],"sourcesContent":["'use client';\nimport type { FC } from 'react';\nimport { Bar, BarChart, CartesianGrid, ResponsiveContainer, XAxis, YAxis, Tooltip as RechartsTooltip } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';\nimport type { ChartDataPoint } from '@/types';\nimport { Frown, Meh, Smile } from 'lucide-react';\n\ninterface ProgressChartProps {\n  data: ChartDataPoint[];\n}\n\nconst chartConfig = {\n  sentimentScore: {\n    label: 'Sentiment Score',\n    color: 'hsl(var(--accent))', // Muted Green\n  },\n} satisfies ChartConfig;\n\nconst ProgressChart: FC<ProgressChartProps> = ({ data }) => {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64 text-center p-6 border-2 border-dashed rounded-lg bg-muted/50\">\n        <Smile className=\"w-12 h-12 text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-medium text-foreground mb-1\">No entries yet!</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Start journaling to see your sentiment trends over time.\n        </p>\n      </div>\n    );\n  }\n  \n  // Ensure Y-axis always shows -1 to 1 range even if data is limited\n  const yAxisDomain = [-1, 1];\n\n  return (\n    <div className=\"h-[300px] w-full\">\n      <ChartContainer config={chartConfig} className=\"w-full h-full\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={data} margin={{ top: 5, right: 20, left: -20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"hsl(var(--border)/0.5)\" />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0,6)} // Example: \"Jan 01\"\n              className=\"text-xs\"\n            />\n            <YAxis \n              domain={yAxisDomain} \n              ticks={[-1, -0.5, 0, 0.5, 1]}\n              tickFormatter={(value) => value.toFixed(1)}\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              className=\"text-xs\"\n            />\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent \n                labelFormatter={(value, payload) => {\n                  if (payload && payload.length > 0 && payload[0].payload.name) {\n                    return payload[0].payload.name;\n                  }\n                  return value;\n                }}\n                indicator=\"dot\" \n              />}\n            />\n            <Bar \n              dataKey=\"sentimentScore\" \n              fill=\"var(--color-sentimentScore)\" \n              radius={4} \n              barSize={Math.max(10, 250 / data.length)} // Dynamic bar size\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </ChartContainer>\n       <div className=\"flex justify-between text-xs text-muted-foreground mt-2 px-2\">\n        <div className=\"flex items-center gap-1\"><Frown className=\"w-3.5 h-3.5\"/> Negative</div>\n        <div className=\"flex items-center gap-1\"><Meh className=\"w-3.5 h-3.5\"/> Neutral</div>\n        <div className=\"flex items-center gap-1\"><Smile className=\"w-3.5 h-3.5\"/> Positive</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressChart;\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AALA;;;;;AAWA,MAAM,cAAc;IAClB,gBAAgB;QACd,OAAO;QACP,OAAO;IACT;AACF;AAEA,MAAM,gBAAwC,CAAC,EAAE,IAAI,EAAE;IACrD,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;QAC9B,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC,uMAAA,CAAA,QAAK;oBAAC,WAAU;;;;;;8BACjB,6LAAC;oBAAG,WAAU;8BAA2C;;;;;;8BACzD,6LAAC;oBAAE,WAAU;8BAAgC;;;;;;;;;;;;IAKnD;IAEA,mEAAmE;IACnE,MAAM,cAAc;QAAC,CAAC;QAAG;KAAE;IAE3B,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,oIAAA,CAAA,iBAAc;gBAAC,QAAQ;gBAAa,WAAU;0BAC7C,cAAA,6LAAC,sKAAA,CAAA,sBAAmB;oBAAC,OAAM;oBAAO,QAAO;8BACvC,cAAA,6LAAC,uJAAA,CAAA,WAAQ;wBAAC,MAAM;wBAAM,QAAQ;4BAAE,KAAK;4BAAG,OAAO;4BAAI,MAAM,CAAC;4BAAI,QAAQ;wBAAE;;0CACtE,6LAAC,gKAAA,CAAA,gBAAa;gCAAC,iBAAgB;gCAAM,UAAU;gCAAO,QAAO;;;;;;0CAC7D,6LAAC,wJAAA,CAAA,QAAK;gCACJ,SAAQ;gCACR,UAAU;gCACV,UAAU;gCACV,YAAY;gCACZ,eAAe,CAAC,QAAU,MAAM,KAAK,CAAC,GAAE;gCACxC,WAAU;;;;;;0CAEZ,6LAAC,wJAAA,CAAA,QAAK;gCACJ,QAAQ;gCACR,OAAO;oCAAC,CAAC;oCAAG,CAAC;oCAAK;oCAAG;oCAAK;iCAAE;gCAC5B,eAAe,CAAC,QAAU,MAAM,OAAO,CAAC;gCACxC,UAAU;gCACV,UAAU;gCACV,YAAY;gCACZ,WAAU;;;;;;0CAEZ,6LAAC,oIAAA,CAAA,eAAY;gCACX,QAAQ;gCACR,uBAAS,6LAAC,oIAAA,CAAA,sBAAmB;oCAC3B,gBAAgB,CAAC,OAAO;wCACtB,IAAI,WAAW,QAAQ,MAAM,GAAG,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE;4CAC5D,OAAO,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI;wCAChC;wCACA,OAAO;oCACT;oCACA,WAAU;;;;;;;;;;;0CAGd,6LAAC,sJAAA,CAAA,MAAG;gCACF,SAAQ;gCACR,MAAK;gCACL,QAAQ;gCACR,SAAS,KAAK,GAAG,CAAC,IAAI,MAAM,KAAK,MAAM;;;;;;;;;;;;;;;;;;;;;;0BAK9C,6LAAC;gBAAI,WAAU;;kCACd,6LAAC;wBAAI,WAAU;;0CAA0B,6LAAC,uMAAA,CAAA,QAAK;gCAAC,WAAU;;;;;;4BAAe;;;;;;;kCACzE,6LAAC;wBAAI,WAAU;;0CAA0B,6LAAC,mMAAA,CAAA,MAAG;gCAAC,WAAU;;;;;;4BAAe;;;;;;;kCACvE,6LAAC;wBAAI,WAAU;;0CAA0B,6LAAC,uMAAA,CAAA,QAAK;gCAAC,WAAU;;;;;;4BAAe;;;;;;;;;;;;;;;;;;;AAIjF;KAnEM;uCAqES","debugId":null}},
    {"offset": {"line": 1163, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-sentiment.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Analyzes the sentiment of journal entries using AI.\n *\n * - analyzeSentiment - A function that analyzes the sentiment of journal entries.\n * - AnalyzeSentimentInput - The input type for the analyzeSentiment function.\n * - AnalyzeSentimentOutput - The return type for the analyzeSentiment function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeSentimentInputSchema = z.object({\n  journalEntry: z.string().describe('The journal entry to analyze.'),\n});\nexport type AnalyzeSentimentInput = z.infer<typeof AnalyzeSentimentInputSchema>;\n\nconst AnalyzeSentimentOutputSchema = z.object({\n  sentiment: z\n    .string()\n    .describe(\n      'The sentiment of the journal entry (e.g., positive, negative, neutral).'\n    ),\n  score: z.number().describe('The sentiment score of the journal entry (-1 to 1).'),\n});\nexport type AnalyzeSentimentOutput = z.infer<typeof AnalyzeSentimentOutputSchema>;\n\nexport async function analyzeSentiment(input: AnalyzeSentimentInput): Promise<AnalyzeSentimentOutput> {\n  return analyzeSentimentFlow(input);\n}\n\nconst analyzeSentimentPrompt = ai.definePrompt({\n  name: 'analyzeSentimentPrompt',\n  input: {schema: AnalyzeSentimentInputSchema},\n  output: {schema: AnalyzeSentimentOutputSchema},\n  prompt: `Analyze the sentiment of the following journal entry. Return the sentiment as a string (positive, negative, or neutral) and a sentiment score between -1 and 1.\n\nJournal Entry: {{{journalEntry}}}`,\n});\n\nconst analyzeSentimentFlow = ai.defineFlow(\n  {\n    name: 'analyzeSentimentFlow',\n    inputSchema: AnalyzeSentimentInputSchema,\n    outputSchema: AnalyzeSentimentOutputSchema,\n  },\n  async input => {\n    const {output} = await analyzeSentimentPrompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;IA2BsB","debugId":null}},
    {"offset": {"line": 1175, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-insight-keywords-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Suggests keywords for user insights using AI.\n *\n * - suggestInsightKeywords - A function that suggests keywords for a given insight text.\n * - SuggestInsightKeywordsInput - The input type for the suggestInsightKeywords function.\n * - SuggestInsightKeywordsOutput - The return type for the suggestInsightKeywords function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestInsightKeywordsInputSchema = z.object({\n  insightText: z.string().describe(\"The user's insight text to analyze for keywords.\"),\n});\nexport type SuggestInsightKeywordsInput = z.infer<typeof SuggestInsightKeywordsInputSchema>;\n\nconst SuggestInsightKeywordsOutputSchema = z.object({\n  keywords: z.array(z.string()).describe('A list of suggested keywords or short phrases (3-5 items).'),\n});\nexport type SuggestInsightKeywordsOutput = z.infer<typeof SuggestInsightKeywordsOutputSchema>;\n\nexport async function suggestInsightKeywords(input: SuggestInsightKeywordsInput): Promise<SuggestInsightKeywordsOutput> {\n  return suggestInsightKeywordsFlow(input);\n}\n\nconst suggestKeywordsPrompt = ai.definePrompt({\n  name: 'suggestInsightKeywordsPrompt',\n  input: {schema: SuggestInsightKeywordsInputSchema},\n  output: {schema: SuggestInsightKeywordsOutputSchema},\n  prompt: `You are an AI assistant helping users reflect on their goals and insights.\nGiven the following user's insight about overcoming a potential failure related to their goal, suggest 3-5 concise keywords or short phrases.\nThese keywords should capture the main themes, actionable elements, or core realizations from the insight.\nEnsure the output is a list of strings.\n\nUser Insight:\n{{{insightText}}}\n\nSuggested Keywords:`,\n  config: {\n    temperature: 0.5, \n  }\n});\n\nconst suggestInsightKeywordsFlow = ai.defineFlow(\n  {\n    name: 'suggestInsightKeywordsFlow',\n    inputSchema: SuggestInsightKeywordsInputSchema,\n    outputSchema: SuggestInsightKeywordsOutputSchema,\n  },\n  async (input) => {\n    const {output} = await suggestKeywordsPrompt(input);\n    if (!output || !Array.isArray(output.keywords)) {\n        console.warn(\"LLM did not return expected keywords format. Output:\", output);\n        return { keywords: [] };\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;IAsBsB","debugId":null}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/categorize-failure-reason-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Categorizes a user's stated reason for potential goal failure using AI.\n *\n * - categorizeFailureReason - A function that categorizes the failure reason.\n * - CategorizeFailureReasonInput - The input type for the categorizeFailureReason function.\n * - CategorizeFailureReasonOutput - The return type for the categorizeFailureReason function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CategorizeFailureReasonInputSchema = z.object({\n  failureReason: z.string().describe(\"The user's stated reason for why their goal might fail.\"),\n});\nexport type CategorizeFailureReasonInput = z.infer<typeof CategorizeFailureReasonInputSchema>;\n\nconst CategorizeFailureReasonOutputSchema = z.object({\n  category: z.enum(['POSSIBLE_OUTCOME', 'PAST_TRAIT', 'ABSOLUTE_TRUTH'])\n    .describe('The identified category of the failure reason.'),\n  categorizedStatement: z.string()\n    .describe('The failure reason rephrased according to the identified category and its template.'),\n});\nexport type CategorizeFailureReasonOutput = z.infer<typeof CategorizeFailureReasonOutputSchema>;\n\nexport async function categorizeFailureReason(input: CategorizeFailureReasonInput): Promise<CategorizeFailureReasonOutput> {\n  return categorizeFailureReasonFlow(input);\n}\n\nconst categorizeFailureReasonPrompt = ai.definePrompt({\n  name: 'categorizeFailureReasonPrompt',\n  input: {schema: CategorizeFailureReasonInputSchema},\n  output: {schema: CategorizeFailureReasonOutputSchema},\n  prompt: `You are an AI assistant helping users process potential failures related to their goals.\nAnalyze the user's stated reason for potential failure and categorize it into one of the following three categories.\nThen, rephrase the failure reason according to the template for the identified category.\n\nCategories and Templates:\n\n1.  **POSSIBLE_OUTCOME**: The reason describes a potential external event or outcome that might occur.\n    *   Template: \"It is possible to fail because it is possible that [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'bad weather', rephrase to 'the weather will be bad']\"\n    *   Example Input: \"the project might get delayed\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that the project might get delayed\"\n    *   Example Input: \"I don't get the promotion\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that I won't get the promotion\"\n\n2.  **PAST_TRAIT**: The reason describes a personal trait, past behavior, or recurring pattern of the user.\n    *   Template: \"It is possible to fail because in the past I have been [trait/behavior from original reason, e.g., 'lazy', 'procrastinating', 'afraid to ask for help']\"\n    *   Example Input: \"I am lazy\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been lazy\"\n    *   Example Input: \"I tend to procrastinate\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have tended to procrastinate\"\n    *   Example Input: \"my usual fear of public speaking\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been afraid of public speaking\"\n\n\n3.  **ABSOLUTE_TRUTH**: The reason describes something the user perceives as an unchangeable fact, an absolute external barrier, or a deeply ingrained limiting belief, which they express as a feeling about the situation.\n    *   Template: \"It is possible to fail because I feel [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'the economy is bad', rephrase to 'the economy is bad'; if user says 'success is impossible for me', rephrase to 'success is impossible for me']\"\n    *   Example Input: \"the economy is bad\"\n    *   Example Output Statement: \"It is possible to fail because I feel the economy is bad\"\n    *   Example Input: \"success is impossible for me\"\n    *   Example Output Statement: \"It is possible to fail because I feel success is impossible for me\"\n    *   Example Input: \"There's not enough time in the day\"\n    *   Example Output Statement: \"It is possible to fail because I feel there's not enough time in the day\"\n\n\nUser's Failure Reason:\n{{{failureReason}}}\n\nReturn ONLY the identified category and the rephrased statement based on the templates.\nThe 'categorizedStatement' should be the rephrased version.\n`,\n  config: {\n    temperature: 0.3, // Lower temperature for more deterministic categorization\n  }\n});\n\nconst categorizeFailureReasonFlow = ai.defineFlow(\n  {\n    name: 'categorizeFailureReasonFlow',\n    inputSchema: CategorizeFailureReasonInputSchema,\n    outputSchema: CategorizeFailureReasonOutputSchema,\n  },\n  async (input) => {\n    const {output} = await categorizeFailureReasonPrompt(input);\n    if (!output) {\n      // Fallback or error handling if LLM doesn't return expected output\n      console.error(\"LLM did not return expected output for failure reason categorization.\");\n      // Return a default or throw an error\n      return { \n        category: 'ABSOLUTE_TRUTH', // Default category\n        categorizedStatement: `It is possible to fail because I feel ${input.failureReason}` // Default statement based on new rule\n      };\n    }\n    return output;\n  }\n);\n\n"],"names":[],"mappings":";;;;;IAyBsB","debugId":null}},
    {"offset": {"line": 1199, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/processing/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\n// Slider, Popover, Calendar, Input are no longer directly used for goal setting on this page.\n// They are still used for negative characteristics.\nimport { Slider } from '@/components/ui/slider';\nimport { Input } from '@/components/ui/input';\n\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport JournalEditor from '@/components/reflectify/JournalEditor';\nimport SentimentDisplay from '@/components/reflectify/SentimentDisplay';\nimport ProgressChart from '@/components/reflectify/ProgressChart';\nimport type { JournalEntry, ChartDataPoint, NegativeCharacteristicInput } from '@/types';\nimport { analyzeSentiment, type AnalyzeSentimentOutput } from '@/ai/flows/analyze-sentiment';\nimport { suggestInsightKeywords, type SuggestInsightKeywordsOutput } from '@/ai/flows/suggest-insight-keywords-flow';\nimport { categorizeFailureReason, type CategorizeFailureReasonOutput } from '@/ai/flows/categorize-failure-reason-flow';\nimport { format, parseISO, eachDayOfInterval, subDays } from 'date-fns';\nimport { Loader2, Send, Lightbulb, AlertTriangle, CheckCircle, XCircle, MessageSquareHeart, Sparkles, Info } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\n\n\nconst JOURNAL_HISTORY_KEY = 'reflectifyJournalHistory';\n\ninterface NegativeCharacteristicState extends NegativeCharacteristicInput {\n  id: string;\n}\n\nconst initialCharacteristics: NegativeCharacteristicState[] = [\n  { id: 'char1', name: '', rating: 0 },\n  { id: 'char2', name: '', rating: 0 },\n  { id: 'char3', name: '', rating: 0 },\n];\n\nexport default function ProcessingPage() {\n  // Goal related states removed as per request for this page\n  // const [goalText, setGoalText] = useState<string>('');\n  // const [goalAchievability, setGoalAchievability] = useState<number>(5);\n  // const [goalDeadline, setGoalDeadline] = useState<Date | undefined>();\n  const [canGoalFail, setCanGoalFail] = useState<boolean | null>(null);\n\n  const [failureReason, setFailureReason] = useState<string>('');\n  const [leftHandText, setLeftHandText] = useState<string>('');\n  const [rightHandText, setRightHandText] = useState<string>('');\n  const [insightsText, setInsightsText] = useState<string>('');\n  const [showProcessingResults, setShowProcessingResults] = useState<boolean>(false);\n\n  const [journalEntryText, setJournalEntryText] = useState<string>('');\n  const [negativeCharacteristics, setNegativeCharacteristics] = useState<NegativeCharacteristicState[]>(initialCharacteristics);\n\n  const [currentSentiment, setCurrentSentiment] = useState<AnalyzeSentimentOutput | null>(null);\n  const [journalHistory, setJournalHistory] = useState<JournalEntry[]>([]);\n  const [isLoadingAi, setIsLoadingAi] = useState<boolean>(false);\n  const [isProcessingFailure, setIsProcessingFailure] = useState<boolean>(false);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n  const { toast } = useToast();\n\n  const [suggestedKeywords, setSuggestedKeywords] = useState<string[] | null>(null);\n  const [isSuggestingKeywords, setIsSuggestingKeywords] = useState<boolean>(false);\n  const [categorizedFailureOutput, setCategorizedFailureOutput] = useState<CategorizeFailureReasonOutput | null>(null);\n\n\n  useEffect(() => {\n    try {\n      const storedHistory = localStorage.getItem(JOURNAL_HISTORY_KEY);\n      if (storedHistory) {\n        setJournalHistory(JSON.parse(storedHistory));\n      }\n    } catch (error) {\n      console.error(\"Failed to load journal history from localStorage:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Could not load your journal history.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    const today = new Date();\n    const dateInterval = eachDayOfInterval({\n      start: subDays(today, 6),\n      end: today\n    });\n    \n    const dataForChart = dateInterval.map(date => {\n      const isoDateString = date.toISOString().split('T')[0];\n      const entryForDay = journalHistory.find(entry => entry.date.startsWith(isoDateString));\n      return {\n        date: format(date, 'MMM dd'),\n        name: format(date, 'EEEE, MMM dd, yyyy'),\n        sentimentScore: entryForDay?.sentimentAnalysis?.score ?? null,\n      };\n    });\n    setChartData(dataForChart);\n  }, [journalHistory]);\n\n  const handleSetCanGoalFail = (value: boolean) => {\n    setCanGoalFail(value);\n    setSuggestedKeywords(null); \n    setShowProcessingResults(false);\n    setCategorizedFailureOutput(null);\n    setLeftHandText('');\n    setRightHandText('');\n    setInsightsText('');\n\n    if (value === false) {\n      setFailureReason('');\n      toast({\n        title: \"Goal Marked as Fail-Proof\",\n        description: \"Failure analysis section has been hidden.\",\n        variant: \"default\",\n      });\n    } else {\n        setInsightsText('');\n    }\n  };\n\n  const handleCharacteristicChange = (index: number, field: 'name' | 'rating', value: string | number) => {\n    setNegativeCharacteristics(prev => {\n      const updated = [...prev];\n      if (field === 'name' && typeof value === 'string') {\n        updated[index].name = value;\n      } else if (field === 'rating' && typeof value === 'number') {\n        updated[index].rating = value;\n      }\n      return updated;\n    });\n  };\n\n  const handleFailureProcessing = useCallback(async () => {\n    if (!failureReason.trim()) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please describe how your goal could potentially fail.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsProcessingFailure(true);\n    setSuggestedKeywords(null);\n    setCategorizedFailureOutput(null);\n    setShowProcessingResults(false);\n\n    try {\n      const result = await categorizeFailureReason({ failureReason });\n      setCategorizedFailureOutput(result);\n      setLeftHandText(`${result.categorizedStatement}, inhale exhale.`);\n      setRightHandText(`Although ${result.categorizedStatement}, I still want my goal.`);\n      setShowProcessingResults(true);\n      setInsightsText(''); \n      toast({\n        title: 'Processing Complete',\n        description: '10F processing results are now available. Please reflect on your insights.',\n      });\n    } catch (error) {\n      console.error('Error categorizing failure reason:', error);\n      setLeftHandText(`It is possible to fail because ${failureReason}, inhale exhale.`);\n      setRightHandText(`Although it is possible to fail because ${failureReason}, I still want my goal.`);\n      setShowProcessingResults(true);\n      setInsightsText('');\n      toast({\n        title: 'Processing Note',\n        description: 'Could not categorize failure reason with AI, using basic processing. Please reflect on your insights.',\n        variant: 'default',\n      });\n    } finally {\n      setIsProcessingFailure(false);\n    }\n  }, [failureReason, toast]);\n\n  const handleSuggestKeywords = useCallback(async () => {\n    if (!insightsText.trim()) {\n      toast({\n        title: 'Empty Insight',\n        description: 'Please write your insights before suggesting keywords.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsSuggestingKeywords(true);\n    setSuggestedKeywords(null);\n    try {\n      const result = await suggestInsightKeywords({ insightText: insightsText });\n      setSuggestedKeywords(result.keywords);\n      toast({\n        title: 'Keywords Suggested',\n        description: 'AI has suggested some keywords for your insight.',\n      });\n    } catch (error) {\n      console.error('Error suggesting keywords:', error);\n      toast({\n        title: 'Keyword Suggestion Error',\n        description: 'Could not get keyword suggestions. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSuggestingKeywords(false);\n    }\n  }, [insightsText, toast]);\n\n  const handleJournalSubmit = useCallback(async () => {\n    if (!journalEntryText.trim() && negativeCharacteristics.every(char => !char.name.trim()) && (canGoalFail === null || (canGoalFail === true && !failureReason.trim() && !insightsText.trim()))) {\n      let description = 'Please write your thoughts, define a characteristic, or complete the failure analysis.';\n      if (canGoalFail === null) {\n        description = 'Please select if your goal can fail, or write thoughts/characteristics.';\n      }\n        toast({\n            title: 'Empty Entry',\n            description: description,\n            variant: 'default',\n        });\n        return;\n    }\n    if (canGoalFail === true && showProcessingResults && !insightsText.trim()){\n      toast({\n        title: 'Missing Insights',\n        description: 'Please provide your insights and realizations from the 10F processing.',\n        variant: 'default',\n      });\n      return;\n    }\n\n\n    setIsLoadingAi(true);\n    setCurrentSentiment(null);\n    try {\n      let sentimentResult: AnalyzeSentimentOutput | null = null;\n      if (journalEntryText.trim()) {\n        sentimentResult = await analyzeSentiment({ journalEntry: journalEntryText });\n        setCurrentSentiment(sentimentResult);\n      }\n\n      const newEntry: JournalEntry = {\n        id: new Date().toISOString(),\n        date: new Date().toISOString(),\n        // Goal related fields are not set from this page\n        entryText: journalEntryText.trim(),\n        sentimentAnalysis: sentimentResult ?? undefined,\n        negativeCharacteristics: negativeCharacteristics.filter(char => char.name.trim()).map(({id, ...rest}) => rest),\n        failureReason: canGoalFail && failureReason.trim() ? failureReason.trim() : undefined,\n        leftHandText: canGoalFail && leftHandText.trim() ? leftHandText.trim() : undefined,\n        rightHandText: canGoalFail && rightHandText.trim() ? rightHandText.trim() : undefined,\n        insightsText: canGoalFail && insightsText.trim() ? insightsText.trim() : undefined,\n        failureCategory: categorizedFailureOutput?.category,\n        categorizedFailureStatement: categorizedFailureOutput?.categorizedStatement,\n      };\n\n      setJournalHistory(prevHistory => {\n        const updatedHistory = [newEntry, ...prevHistory];\n        try {\n          localStorage.setItem(JOURNAL_HISTORY_KEY, JSON.stringify(updatedHistory));\n        } catch (error) {\n          console.error(\"Failed to save journal history to localStorage:\", error);\n          toast({\n            title: \"Storage Error\",\n            description: \"Could not save your journal entry due to storage limitations.\",\n            variant: \"destructive\",\n          });\n        }\n        return updatedHistory;\n      });\n\n      // Reset fields\n      // setGoalText(''); // Removed\n      // setGoalAchievability(5); // Removed\n      // setGoalDeadline(undefined); // Removed\n      setJournalEntryText('');\n      setNegativeCharacteristics(initialCharacteristics);\n      setCurrentSentiment(null);\n      setCanGoalFail(null); \n      setFailureReason('');\n      setLeftHandText('');\n      setRightHandText('');\n      setInsightsText('');\n      setShowProcessingResults(false);\n      setSuggestedKeywords(null);\n      setCategorizedFailureOutput(null);\n\n\n      toast({\n        title: 'Journal Saved',\n        description: 'Your reflections have been recorded.',\n      });\n    } catch (error) {\n      console.error('Error processing or saving journal:', error);\n      toast({\n        title: 'Error',\n        description: 'Could not process or save your journal. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoadingAi(false);\n    }\n  }, [toast, journalEntryText, negativeCharacteristics, canGoalFail, failureReason, leftHandText, rightHandText, insightsText, showProcessingResults, categorizedFailureOutput]);\n\n  const getCategoryDescription = (category?: string) => {\n    if (!category) return null;\n    switch (category) {\n      case 'POSSIBLE_OUTCOME':\n        return 'This failure reason seems to relate to a potential external event or outcome.';\n      case 'PAST_TRAIT':\n        return 'This failure reason seems to relate to a personal trait or past behavior.';\n      case 'ABSOLUTE_TRUTH':\n        return 'This failure reason seems to relate to a perceived unchangeable fact or limiting belief.';\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-3xl py-8 px-4 flex flex-col gap-8\">\n      <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n        <CardHeader className=\"bg-primary/30\">\n          <CardTitle className=\"text-xl font-semibold text-primary-foreground\">\n            Impossible to fail\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-6 space-y-6\">\n          <div className=\"space-y-3\">\n            <p className=\"text-foreground text-base\">\n              Pay attention to your goal, is it possible to fail?\n            </p>\n            <div className=\"flex flex-wrap gap-4 pt-1\">\n              <Button \n                variant={canGoalFail === true ? 'default' : 'outline'} \n                onClick={() => handleSetCanGoalFail(true)}\n                className=\"flex-grow sm:flex-grow-0\"\n              >\n                <XCircle className=\"mr-2 h-5 w-5\" /> Yes, failure is possible\n              </Button>\n              <Button \n                variant={canGoalFail === false ? 'default' : 'outline'} \n                onClick={() => handleSetCanGoalFail(false)}\n                className={cn(\n                  \"flex-grow sm:flex-grow-0\",\n                  canGoalFail === false && \"!bg-accent !text-accent-foreground hover:!bg-accent/90\"\n                )}\n              >\n                <CheckCircle className=\"mr-2 h-5 w-5\" /> No, it's fail-proof\n              </Button>\n            </div>\n          </div>\n          \n          {/* Goal description, achievability, and deadline fields removed from this page */}\n\n        </CardContent>\n      </Card>\n\n      {canGoalFail === true && (\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-foreground\">\n              Failure Mode Analysis\n            </CardTitle>\n            <CardDescription className=\"text-base text-muted-foreground pt-2\">\n              If your goal could fail, describe how that might happen. The AI will help categorize it.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"failureReason\" className=\"text-base\">How could your goal potentially fail?</Label>\n              <Textarea\n                id=\"failureReason\"\n                value={failureReason}\n                onChange={(e) => {\n                  setFailureReason(e.target.value);\n                  setShowProcessingResults(false); \n                  setCategorizedFailureOutput(null);\n                }}\n                placeholder=\"e.g., It is too expensive, I might lose motivation, unexpected events, I am lazy...\"\n                rows={3}\n                className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n            <Button \n              onClick={handleFailureProcessing} \n              disabled={isProcessingFailure || !failureReason.trim()}\n              className=\"w-full sm:w-auto bg-accent text-accent-foreground hover:bg-accent/90 focus-visible:ring-ring px-6 py-3 text-base\"\n              aria-label=\"Process Potential Failure Mode\"\n            >\n              {isProcessingFailure ? (\n                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              ) : (\n                <Lightbulb className=\"mr-2 h-5 w-5\" />\n              )}\n              Process Potential Failure\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {canGoalFail === false && (\n         <Card className=\"shadow-lg rounded-xl overflow-hidden border-accent\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                <CheckCircle className=\"mr-2 h-6 w-6 text-accent\" /> Goal Confidence\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-2\">\n              <p className=\"text-base text-foreground\">\n                Great! You're confident your goal is fail-proof. Focus on achieving it and move on to other reflections.\n              </p>\n            </CardContent>\n          </Card>\n      )}\n\n\n      {showProcessingResults && canGoalFail === true && (\n        <>\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-foreground\">10F Processing Results</CardTitle>\n            <CardDescription className=\"text-base text-muted-foreground pt-2\">\n              Reflect on these statements to strengthen your resolve.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6 space-y-6\">\n            {categorizedFailureOutput?.category && (\n              <div className=\"p-3 bg-primary/10 rounded-md border border-primary/30 text-sm text-primary-foreground flex items-start gap-2\">\n                <Info className=\"h-5 w-5 mt-0.5 shrink-0\" />\n                <p><span className=\"font-semibold\">Process Category:</span> {getCategoryDescription(categorizedFailureOutput.category)}</p>\n              </div>\n            )}\n            <h4 className=\"text-lg font-semibold text-foreground\">Do the 10F processing:</h4>\n            <Card className=\"bg-card border-destructive/50\">\n              <CardHeader>\n                <CardTitle className=\"text-md font-semibold text-destructive flex items-center\">\n                  <AlertTriangle className=\"mr-2 h-5 w-5 text-destructive\" /> Left Hand Focus\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-base text-foreground\">{leftHandText}</p>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card border-accent/50\">\n              <CardHeader>\n                <CardTitle className=\"text-md font-semibold text-accent-foreground flex items-center\">\n                  <Lightbulb className=\"mr-2 h-5 w-5 text-accent\" /> Right Hand Affirmation\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-base text-foreground\">{rightHandText}</p>\n              </CardContent>\n            </Card>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <MessageSquareHeart className=\"mr-2 h-6 w-6 text-primary\"/> Insights and Realizations\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Is there something you could conclude about this process, about possibilities for its achievement? (Usually something about how you could resolve that barrier). This is the user&apos;s most important part!\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Label htmlFor=\"insightsText\" className=\"text-base\">Your Insights:</Label>\n                <Textarea\n                    id=\"insightsText\"\n                    value={insightsText}\n                    onChange={(e) => {\n                      setInsightsText(e.target.value);\n                      setSuggestedKeywords(null); \n                    }}\n                    placeholder=\"e.g., I realize I can break down the cost, or seek alternative cheaper solutions...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n                <div className=\"mt-4 space-y-3\">\n                    <Button\n                        onClick={handleSuggestKeywords}\n                        disabled={isSuggestingKeywords || !insightsText.trim()}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-sm\"\n                    >\n                        {isSuggestingKeywords ? (\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        ) : (\n                            <Sparkles className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Suggest Keywords\n                    </Button>\n                    {suggestedKeywords && suggestedKeywords.length > 0 && (\n                        <div className=\"p-3 bg-muted/50 rounded-md border\">\n                            <h5 className=\"text-sm font-semibold mb-2 text-foreground\">Suggested Keywords:</h5>\n                            <div className=\"flex flex-wrap gap-2\">\n                                {suggestedKeywords.map((keyword, index) => (\n                                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                        {keyword}\n                                    </Badge>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n        </>\n      )}\n\n      <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold text-foreground\">\n            Negative Characteristic Test\n          </CardTitle>\n          <CardDescription className=\"text-base text-muted-foreground pt-2\">\n            Most people feel reluctance working on their goals due to negative characteristics they have had in the past, for example laziness, procrastination, reluctance to confront people. \n            Rate your own personal 3-5 negative characteristics from -10 to 10 (-10 being extremely problematic for you and 10 being no problem at all).\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6 pt-6\">\n          {negativeCharacteristics.map((char, index) => (\n            <div key={char.id} className=\"space-y-3 p-4 border rounded-lg shadow-sm\">\n              <Label htmlFor={`char-name-processing-${index}`} className=\"text-base\">\n                Negative Characteristic #{index + 1}\n              </Label>\n              <Input\n                id={`char-name-processing-${index}`}\n                type=\"text\"\n                placeholder=\"e.g., Laziness, Procrastination\"\n                value={char.name}\n                onChange={(e) => handleCharacteristicChange(index, 'name', e.target.value)}\n                className=\"text-base\"\n              />\n              <Label htmlFor={`char-rating-processing-${index}`} className=\"text-base\">\n                Problematic Rating (-10 to 10)\n              </Label>\n              <div className=\"flex items-center gap-4\">\n                <Slider\n                  id={`char-rating-processing-${index}`}\n                  min={-10}\n                  max={10}\n                  step={1}\n                  value={[char.rating]}\n                  onValueChange={(value) => handleCharacteristicChange(index, 'rating', value[0])}\n                  className=\"flex-grow\"\n                  aria-label={`Rating for characteristic ${index + 1}`}\n                />\n                <span className=\"text-base font-medium w-12 text-right text-foreground\">{char.rating}</span>\n              </div>\n            </div>\n          ))}\n          \n          <div className=\"space-y-2 pt-4\">\n            <Label htmlFor=\"journalEntryProcessing\" className=\"text-base\">General Thoughts & Reflections</Label>\n            <JournalEditor\n              value={journalEntryText}\n              onChange={setJournalEntryText}\n            />\n          </div>\n\n          <Button \n            onClick={handleJournalSubmit} \n            disabled={isLoadingAi || (!journalEntryText.trim() && negativeCharacteristics.every(char => !char.name.trim()) && (canGoalFail === null || (canGoalFail === true && (!failureReason.trim() || (showProcessingResults && !insightsText.trim()))))) || (canGoalFail === true && showProcessingResults && !insightsText.trim())} \n            className=\"w-full sm:w-auto bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-2 px-6 py-3 text-base rounded-lg shadow-md transition-all duration-150 ease-in-out hover:shadow-lg\"\n            aria-label=\"Analyze & Save Entries\"\n          >\n            {isLoadingAi ? (\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n            ) : (\n              <Send className=\"mr-2 h-5 w-5\" />\n            )}\n            Analyze & Save Entries\n          </Button>\n        </CardContent>\n      </Card>\n\n      {currentSentiment && journalEntryText.trim() && (\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-foreground\">\n              Sentiment Analysis of General Thoughts\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <SentimentDisplay\n              sentiment={currentSentiment.sentiment}\n              score={currentSentiment.score}\n            />\n          </CardContent>\n        </Card>\n      )}\n\n      <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold text-foreground\">\n            My Sentiment Trend (Last 7 Days)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ProgressChart data={chartData} />\n        </CardContent>\n      </Card>\n      <div className=\"mt-4 text-center\">\n        <Button variant=\"link\" asChild>\n          <Link href=\"/\">Back to Main Journal Page</Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}