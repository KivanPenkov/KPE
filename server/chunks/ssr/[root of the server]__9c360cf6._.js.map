{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-sentiment.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Analyzes the sentiment of journal entries using AI.\n *\n * - analyzeSentiment - A function that analyzes the sentiment of journal entries.\n * - AnalyzeSentimentInput - The input type for the analyzeSentiment function.\n * - AnalyzeSentimentOutput - The return type for the analyzeSentiment function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeSentimentInputSchema = z.object({\n  journalEntry: z.string().describe('The journal entry to analyze.'),\n});\nexport type AnalyzeSentimentInput = z.infer<typeof AnalyzeSentimentInputSchema>;\n\nconst AnalyzeSentimentOutputSchema = z.object({\n  sentiment: z\n    .string()\n    .describe(\n      'The sentiment of the journal entry (e.g., positive, negative, neutral).'\n    ),\n  score: z.number().describe('The sentiment score of the journal entry (-1 to 1).'),\n});\nexport type AnalyzeSentimentOutput = z.infer<typeof AnalyzeSentimentOutputSchema>;\n\nexport async function analyzeSentiment(input: AnalyzeSentimentInput): Promise<AnalyzeSentimentOutput> {\n  return analyzeSentimentFlow(input);\n}\n\nconst analyzeSentimentPrompt = ai.definePrompt({\n  name: 'analyzeSentimentPrompt',\n  input: {schema: AnalyzeSentimentInputSchema},\n  output: {schema: AnalyzeSentimentOutputSchema},\n  prompt: `Analyze the sentiment of the following journal entry. Return the sentiment as a string (positive, negative, or neutral) and a sentiment score between -1 and 1.\n\nJournal Entry: {{{journalEntry}}}`,\n});\n\nconst analyzeSentimentFlow = ai.defineFlow(\n  {\n    name: 'analyzeSentimentFlow',\n    inputSchema: AnalyzeSentimentInputSchema,\n    outputSchema: AnalyzeSentimentOutputSchema,\n  },\n  async input => {\n    const {output} = await analyzeSentimentPrompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CACP;IAEJ,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGO,eAAe,uCAAc,GAAd,iBAAiB,KAA4B;IACjE,OAAO,qBAAqB;AAC9B;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA2B;IAC3C,QAAQ;QAAC,QAAQ;IAA4B;IAC7C,QAAQ,CAAC;;iCAEsB,CAAC;AAClC;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,uBAAuB;IAC9C,OAAO;AACT;;;IAtBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-insight-keywords-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Suggests keywords for user insights using AI.\n *\n * - suggestInsightKeywords - A function that suggests keywords for a given insight text.\n * - SuggestInsightKeywordsInput - The input type for the suggestInsightKeywords function.\n * - SuggestInsightKeywordsOutput - The return type for the suggestInsightKeywords function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestInsightKeywordsInputSchema = z.object({\n  insightText: z.string().describe(\"The user's insight text to analyze for keywords.\"),\n});\nexport type SuggestInsightKeywordsInput = z.infer<typeof SuggestInsightKeywordsInputSchema>;\n\nconst SuggestInsightKeywordsOutputSchema = z.object({\n  keywords: z.array(z.string()).describe('A list of suggested keywords or short phrases (3-5 items).'),\n});\nexport type SuggestInsightKeywordsOutput = z.infer<typeof SuggestInsightKeywordsOutputSchema>;\n\nexport async function suggestInsightKeywords(input: SuggestInsightKeywordsInput): Promise<SuggestInsightKeywordsOutput> {\n  return suggestInsightKeywordsFlow(input);\n}\n\nconst suggestKeywordsPrompt = ai.definePrompt({\n  name: 'suggestInsightKeywordsPrompt',\n  input: {schema: SuggestInsightKeywordsInputSchema},\n  output: {schema: SuggestInsightKeywordsOutputSchema},\n  prompt: `You are an AI assistant helping users reflect on their goals and insights.\nGiven the following user's insight about overcoming a potential failure related to their goal, suggest 3-5 concise keywords or short phrases.\nThese keywords should capture the main themes, actionable elements, or core realizations from the insight.\nEnsure the output is a list of strings.\n\nUser Insight:\n{{{insightText}}}\n\nSuggested Keywords:`,\n  config: {\n    temperature: 0.5, \n  }\n});\n\nconst suggestInsightKeywordsFlow = ai.defineFlow(\n  {\n    name: 'suggestInsightKeywordsFlow',\n    inputSchema: SuggestInsightKeywordsInputSchema,\n    outputSchema: SuggestInsightKeywordsOutputSchema,\n  },\n  async (input) => {\n    const {output} = await suggestKeywordsPrompt(input);\n    if (!output || !Array.isArray(output.keywords)) {\n        console.warn(\"LLM did not return expected keywords format. Output:\", output);\n        return { keywords: [] };\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACzC;AAGO,eAAe,uCAAoB,GAApB,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;;;;mBAQQ,CAAC;IAClB,QAAQ;QACN,aAAa;IACf;AACF;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,OAAO,QAAQ,GAAG;QAC5C,QAAQ,IAAI,CAAC,wDAAwD;QACrE,OAAO;YAAE,UAAU,EAAE;QAAC;IAC1B;IACA,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/processing/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/processing/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/processing/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/processing/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/processing/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/processing/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}