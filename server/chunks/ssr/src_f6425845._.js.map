{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/slider.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;0BAET,8OAAC,kKAAA,CAAA,QAAqB;gBAAC,WAAU;0BAC/B,cAAA,8OAAC,kKAAA,CAAA,QAAqB;oBAAC,WAAU;;;;;;;;;;;0BAEnC,8OAAC,kKAAA,CAAA,QAAqB;gBAAC,WAAU;;;;;;;;;;;;AAGrC,OAAO,WAAW,GAAG,kKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/categorize-failure-reason-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Categorizes a user's stated reason for potential goal failure using AI.\n *\n * - categorizeFailureReason - A function that categorizes the failure reason.\n * - CategorizeFailureReasonInput - The input type for the categorizeFailureReason function.\n * - CategorizeFailureReasonOutput - The return type for the categorizeFailureReason function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CategorizeFailureReasonInputSchema = z.object({\n  failureReason: z.string().describe(\"The user's stated reason for why their goal might fail.\"),\n});\nexport type CategorizeFailureReasonInput = z.infer<typeof CategorizeFailureReasonInputSchema>;\n\nconst CategorizeFailureReasonOutputSchema = z.object({\n  category: z.enum(['POSSIBLE_OUTCOME', 'PAST_TRAIT', 'ABSOLUTE_TRUTH'])\n    .describe('The identified category of the failure reason.'),\n  categorizedStatement: z.string()\n    .describe('The failure reason rephrased according to the identified category and its template.'),\n});\nexport type CategorizeFailureReasonOutput = z.infer<typeof CategorizeFailureReasonOutputSchema>;\n\nexport async function categorizeFailureReason(input: CategorizeFailureReasonInput): Promise<CategorizeFailureReasonOutput> {\n  return categorizeFailureReasonFlow(input);\n}\n\nconst categorizeFailureReasonPrompt = ai.definePrompt({\n  name: 'categorizeFailureReasonPrompt',\n  input: {schema: CategorizeFailureReasonInputSchema},\n  output: {schema: CategorizeFailureReasonOutputSchema},\n  prompt: `You are an AI assistant helping users process potential failures related to their goals.\nAnalyze the user's stated reason for potential failure and categorize it into one of the following three categories.\nThen, rephrase the failure reason according to the template for the identified category.\n\nCategories and Templates:\n\n1.  **POSSIBLE_OUTCOME**: The reason describes a potential external event or outcome that might occur.\n    *   Template: \"It is possible to fail because it is possible that [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'bad weather', rephrase to 'the weather will be bad']\"\n    *   Example Input: \"the project might get delayed\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that the project might get delayed\"\n    *   Example Input: \"I don't get the promotion\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that I won't get the promotion\"\n\n2.  **PAST_TRAIT**: The reason describes a personal trait, past behavior, or recurring pattern of the user.\n    *   Template: \"It is possible to fail because in the past I have been [trait/behavior from original reason, e.g., 'lazy', 'procrastinating', 'afraid to ask for help']\"\n    *   Example Input: \"I am lazy\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been lazy\"\n    *   Example Input: \"I tend to procrastinate\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have tended to procrastinate\"\n    *   Example Input: \"my usual fear of public speaking\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been afraid of public speaking\"\n\n\n3.  **ABSOLUTE_TRUTH**: The reason describes something the user perceives as an unchangeable fact, an absolute external barrier, or a deeply ingrained limiting belief, which they express as a feeling about the situation.\n    *   Template: \"It is possible to fail because I feel [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'the economy is bad', rephrase to 'the economy is bad'; if user says 'success is impossible for me', rephrase to 'success is impossible for me']\"\n    *   Example Input: \"the economy is bad\"\n    *   Example Output Statement: \"It is possible to fail because I feel the economy is bad\"\n    *   Example Input: \"success is impossible for me\"\n    *   Example Output Statement: \"It is possible to fail because I feel success is impossible for me\"\n    *   Example Input: \"There's not enough time in the day\"\n    *   Example Output Statement: \"It is possible to fail because I feel there's not enough time in the day\"\n\n\nUser's Failure Reason:\n{{{failureReason}}}\n\nReturn ONLY the identified category and the rephrased statement based on the templates.\nThe 'categorizedStatement' should be the rephrased version.\n`,\n  config: {\n    temperature: 0.3, // Lower temperature for more deterministic categorization\n  }\n});\n\nconst categorizeFailureReasonFlow = ai.defineFlow(\n  {\n    name: 'categorizeFailureReasonFlow',\n    inputSchema: CategorizeFailureReasonInputSchema,\n    outputSchema: CategorizeFailureReasonOutputSchema,\n  },\n  async (input) => {\n    const {output} = await categorizeFailureReasonPrompt(input);\n    if (!output) {\n      // Fallback or error handling if LLM doesn't return expected output\n      console.error(\"LLM did not return expected output for failure reason categorization.\");\n      // Return a default or throw an error\n      return { \n        category: 'ABSOLUTE_TRUTH', // Default category\n        categorizedStatement: `It is possible to fail because I feel ${input.failureReason}` // Default statement based on new rule\n      };\n    }\n    return output;\n  }\n);\n\n"],"names":[],"mappings":";;;;;IAyBsB","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/accordion.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,YAAY,qKAAA,CAAA,OAAuB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,qKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QACzB,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG;AAE5B,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,qKAAA,CAAA,SAAyB;QAAC,WAAU;kBACnC,cAAA,8OAAC,qKAAA,CAAA,UAA0B;YACzB,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,gIACA;YAED,GAAG,KAAK;;gBAER;8BACD,8OAAC,oNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,iBAAiB,WAAW,GAAG,qKAAA,CAAA,UAA0B,CAAC,WAAW;AAErE,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,qKAAA,CAAA,UAA0B;QACzB,KAAK;QACL,WAAU;QACT,GAAG,KAAK;kBAET,cAAA,8OAAC;YAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,aAAa;sBAAa;;;;;;;;;;;AAIjD,iBAAiB,WAAW,GAAG,qKAAA,CAAA,UAA0B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/processing/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport type { JournalEntry } from '@/types';\nimport { categorizeFailureReason, type CategorizeFailureReasonOutput } from '@/ai/flows/categorize-failure-reason-flow';\nimport { Loader2, Send, Lightbulb, AlertTriangle, CheckCircle, XCircle, MessageSquareHeart, Sparkles, Info, Target, ShieldCheck, RefreshCw, Heart, Star, ArrowLeft, ListChecks, Sun, Award, ListOrdered, HelpCircle, Workflow, Triangle, Eye, MessagesSquare, Users, Wand, Milestone } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\n\n\nconst JOURNAL_HISTORY_KEY = 'quickGoalsIIJournalHistory';\nconst FOCUSED_GOAL_VISION_ID_KEY = 'quickGoalsIICurrentFocusedGoalVisionId';\nconst FOCUSED_GOAL_VISION_TYPE_KEY = 'quickGoalsIICurrentFocusedGoalVisionType';\n\ntype ProcessType = 'impossibleToFail' | 'goalDesirability' | 'goalAchievementExperience' | 'bestCaseScenario' | 'bestCasePlusActions' | 'performingThisAction' | 'otherViewpoint' | 'arcTriangle' | 'emt';\n\nexport default function ProcessingPage() {\n  const [selectedProcessType, setSelectedProcessType] = useState<ProcessType | null>(null);\n\n  // States for 'impossibleToFail'\n  const [canGoalFail, setCanGoalFail] = useState<boolean | null>(null);\n  const [failureReason, setFailureReason] = useState<string>('');\n  const [leftHandText, setLeftHandText] = useState<string>('');\n  const [rightHandText, setRightHandText] = useState<string>('');\n  const [categorizedFailureOutput, setCategorizedFailureOutput] = useState<CategorizeFailureReasonOutput | null>(null);\n  const [showProcessingResults, setShowProcessingResults] = useState<boolean>(false);\n  const [isProcessingFailure, setIsProcessingFailure] = useState<boolean>(false);\n\n  // States for 'goalDesirability'\n  const [goalWantRating, setGoalWantRating] = useState<number>(10);\n  const [whyNotTenRatingReason, setWhyNotTenRatingReason] = useState<string>('');\n  const [goalWantReasons, setGoalWantReasons] = useState<string>('');\n\n  // States for 'bestCaseScenario' & 'bestCasePlusActions'\n  const [bestCaseScenarioText, setBestCaseScenarioText] = useState<string>('');\n  \n  // States for 'goalAchievementExperience'\n  const [goalAchievementExperienceText, setGoalAchievementExperienceText] = useState<string>('');\n\n  // States for 'bestCasePlusActions' (includes former 'actionsCertainty')\n  const [actionsListText, setActionsListText] = useState<string>('');\n  const [actionsCertaintyWhyNotText, setActionsCertaintyWhyNotText] = useState<string>('');\n\n\n  // States for 'performingThisAction' (formerly 'detailedActionProcess')\n  const [actionFeelingInitial, setActionFeelingInitial] = useState<string>('');\n  const [actionFeelingDesired, setActionFeelingDesired] = useState<string>('');\n  const [actionCharacteristicsNeeded, setActionCharacteristicsNeeded] = useState<string>('');\n  const [actionCharacteristicsWithout, setActionCharacteristicsWithout] = useState<string>('');\n  const [actionCharacteristicsWith, setActionCharacteristicsWith] = useState<string>('');\n  const [actionUnderstandingNeeded, setActionUnderstandingNeeded] = useState<string>('');\n  const [actionUnderstandingWithout, setActionUnderstandingWithout] = useState<string>('');\n  const [actionUnderstandingWith, setActionUnderstandingWith] = useState<string>('');\n\n  // States for 'arcTriangle'\n  const [arcAffinityMyRating, setArcAffinityMyRating] = useState<number>(10);\n  const [arcAffinityGoalRating, setArcAffinityGoalRating] = useState<number>(10);\n  const [arcAffinityWhyNot, setArcAffinityWhyNot] = useState<string>('');\n  const [arcAffinityExperienceInstead, setArcAffinityExperienceInstead] = useState<string>('');\n  const [arcAffinityRealizations, setArcAffinityRealizations] = useState<string>('');\n\n  const [arcRealityMyAgreementRating, setArcRealityMyAgreementRating] = useState<number>(10);\n  const [arcRealityFateAgreementRating, setArcRealityFateAgreementRating] = useState<number>(10);\n  const [arcRealityWhyNot, setArcRealityWhyNot] = useState<string>('');\n  const [arcRealityExperienceInstead, setArcRealityExperienceInstead] = useState<string>('');\n  const [arcRealityRealizations, setArcRealityRealizations] = useState<string>('');\n\n  const [arcCommunicationOutflowRating, setArcCommunicationOutflowRating] = useState<number>(10);\n  const [arcCommunicationInflowRating, setArcCommunicationInflowRating] = useState<number>(10);\n  const [arcCommunicationWhyNot, setArcCommunicationWhyNot] = useState<string>('');\n  const [arcCommunicationExperienceInstead, setArcCommunicationExperienceInstead] = useState<string>('');\n  const [arcCommunicationRealizations, setArcCommunicationRealizations] = useState<string>('');\n  \n  // States for 'emt' (Experience Modification Technique)\n  const [emtExperienceDescription, setEmtExperienceDescription] = useState<string>('');\n  const [emtInitialRating, setEmtInitialRating] = useState<number>(0);\n  const [emtPositiveParts, setEmtPositiveParts] = useState<string>('');\n  const [emtNegativeParts, setEmtNegativeParts] = useState<string>('');\n  const [emtNeedsDifferentBetter, setEmtNeedsDifferentBetter] = useState<string>('');\n  const [emtModifiedRating, setEmtModifiedRating] = useState<number>(0);\n  const [emtNeedsDifferentEvenBetter, setEmtNeedsDifferentEvenBetter] = useState<string>('');\n  const [emtHappenedBefore, setEmtHappenedBefore] = useState<string>('');\n  const [emtExperienceNow, setEmtExperienceNow] = useState<string>('');\n  const [emtFinalRating, setEmtFinalRating] = useState<number>(0);\n\n  // Common states\n  const [insightsText, setInsightsText] = useState<string>('');\n  const [goalImprovementText, setGoalImprovementText] = useState<string>('');\n  const [journalHistory, setJournalHistory] = useState<JournalEntry[]>([]);\n  const [isLoadingAi, setIsLoadingAi] = useState<boolean>(false); \n  \n  const { toast } = useToast();\n\n\n  useEffect(() => {\n    try {\n      const storedHistory = localStorage.getItem(JOURNAL_HISTORY_KEY);\n      if (storedHistory) {\n        const parsedHistory: JournalEntry[] = JSON.parse(storedHistory);\n        // Filter for entries that have any of the processing-specific fields populated\n        const processingEntries = parsedHistory.filter(\n          entry => entry.isFailProof === true || \n                   (entry.failureReason && entry.failureReason.trim() !== '') ||\n                   entry.goalWantRating !== undefined ||\n                   (entry.bestCaseScenarioText && entry.bestCaseScenarioText.trim() !== '') ||\n                   (entry.goalAchievementExperienceText && entry.goalAchievementExperienceText.trim() !== '') ||\n                   (entry.actionsListText && entry.actionsListText.trim() !== '') ||\n                   (entry.actionsCertaintyWhyNotText && entry.actionsCertaintyWhyNotText.trim() !== '') || // Retained for combined process\n                   (entry.actionFeelingInitial && entry.actionFeelingInitial.trim() !== '') || \n                   entry.arcAffinityMyRating !== undefined ||\n                   entry.emtExperienceDescription !== undefined || \n                   entry.otherViewpointReflections !== undefined || // For new process\n                   entry.inBetweenOutcome1?.trim() !== '' || \n                   entry.inBetweenOutcome2?.trim() !== '' ||\n                   entry.inBetweenOutcome3?.trim() !== '' ||\n                   entry.inBetweenOutcome4?.trim() !== '' ||\n                   entry.inBetweenOutcome5?.trim() !== '' ||\n                   entry.inBetweenOutcome6?.trim() !== '' ||\n                   entry.inBetweenOutcome7?.trim() !== '' ||\n                   entry.inBetweenOutcome8?.trim() !== '' ||\n                   entry.inBetweenOutcome9?.trim() !== '' ||\n                   entry.inBetweenOutcome10?.trim() !== ''\n        );\n        setJournalHistory(processingEntries);\n      }\n    } catch (error) {\n      console.error(\"Failed to load or filter journal history from localStorage:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Could not load your journal history.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n\n  const handleSetCanGoalFail = (value: boolean) => {\n    setCanGoalFail(value);\n    setShowProcessingResults(false);\n    setCategorizedFailureOutput(null);\n    setLeftHandText('');\n    setRightHandText('');\n\n    if (value === false) {\n      setFailureReason(''); \n      toast({\n        title: \"Goal Marked as Fail-Proof\",\n        description: \"Standard 10F Process section has been hidden. You now know it is impossible to fail.\",\n        variant: \"default\",\n      });\n    }\n  };\n\n\n  const handleFailureProcessing = useCallback(async () => {\n    if (!failureReason.trim()) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please describe how your goal could potentially fail.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsProcessingFailure(true);\n    setCategorizedFailureOutput(null);\n    setShowProcessingResults(false);\n\n    try {\n      const result = await categorizeFailureReason({ failureReason });\n      setCategorizedFailureOutput(result);\n      setLeftHandText(`${result.categorizedStatement}, inhale and exhale.`);\n      setRightHandText(`Although ${result.categorizedStatement}, I still want my goal, inhale and exhale.`);\n      setShowProcessingResults(true);\n      toast({\n        title: 'Processing Complete',\n        description: 'Failure reason processed. Please reflect on your insights.',\n      });\n    } catch (error) {\n      console.error('Error categorizing failure reason:', error);\n      setLeftHandText(`It is possible to fail because ${failureReason}, inhale and exhale.`);\n      setRightHandText(`Although it is possible to fail because ${failureReason}, I still want my goal, inhale and exhale.`);\n      setShowProcessingResults(true);\n      // Removed \"Processing Note\" toast\n    } finally {\n      setIsProcessingFailure(false);\n    }\n  }, [failureReason, toast]);\n\n  const handleJournalSubmit = useCallback(async () => {\n    if (selectedProcessType === null) {\n        toast({ title: 'No Process Selected', description: 'Please select a process to work on.', variant: 'default' });\n        return;\n    }\n\n    setIsLoadingAi(true);\n    try {\n      const newEntry: Partial<JournalEntry> = { \n        id: new Date().toISOString(),\n        date: new Date().toISOString(),\n        insightsText: insightsText.trim() ? insightsText.trim() : undefined,\n        goalImprovementText: goalImprovementText.trim() ? goalImprovementText.trim() : undefined,\n      };\n\n      if (selectedProcessType === 'impossibleToFail') {\n        if (canGoalFail === null) {\n            toast({ title: 'Incomplete Entry', description: 'Please select if your goal can potentially fail.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.isFailProof = canGoalFail === false ? true : undefined;\n        if (canGoalFail === true) {\n            if (!failureReason.trim() && showProcessingResults) {\n                 toast({ title: 'Incomplete Entry', description: 'Please describe how your goal could potentially fail if you have processed it.', variant: 'default' });\n                 setIsLoadingAi(false); return;\n            }\n            if (showProcessingResults && !insightsText.trim()) {\n                 toast({ title: 'Missing Insights', description: 'Please provide your insights and realizations from the failure processing.', variant: 'default' });\n                 setIsLoadingAi(false); return;\n            }\n            newEntry.failureReason = failureReason.trim() ? failureReason.trim() : undefined;\n            newEntry.leftHandText = leftHandText.trim() && showProcessingResults ? leftHandText.trim() : undefined;\n            newEntry.rightHandText = rightHandText.trim() && showProcessingResults ? rightHandText.trim() : undefined;\n            newEntry.failureCategory = showProcessingResults ? categorizedFailureOutput?.category : undefined;\n            newEntry.categorizedFailureStatement = showProcessingResults ? categorizedFailureOutput?.categorizedStatement : undefined;\n        }\n      } else if (selectedProcessType === 'goalDesirability') {\n        if (goalWantRating < 10 && !whyNotTenRatingReason.trim()) {\n            toast({ title: 'Missing Information', description: 'Please explain why your goal desirability is not a 10/10.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (goalWantRating < 10 && !goalWantReasons.trim()){\n            toast({ title: 'Missing Information', description: 'Please state your reasons for wanting this goal, as your desirability rating is less than 10/10.', variant: 'default'});\n            setIsLoadingAi(false); return;\n        }\n        if (goalWantRating < 10 && (whyNotTenRatingReason.trim() || goalWantReasons.trim()) && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for the goal desirability process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.goalWantRating = goalWantRating;\n        newEntry.whyNotTenRatingReason = goalWantRating < 10 ? whyNotTenRatingReason.trim() : undefined;\n        newEntry.goalWantReasons = goalWantRating < 10 ? goalWantReasons.trim() : undefined;\n      } else if (selectedProcessType === 'goalAchievementExperience') {\n        if (!goalAchievementExperienceText.trim()) {\n            toast({ title: 'Incomplete Entry', description: 'Please describe your goal achievement experience.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (goalAchievementExperienceText.trim() && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for the goal achievement experience.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.goalAchievementExperienceText = goalAchievementExperienceText.trim();\n        localStorage.setItem(FOCUSED_GOAL_VISION_ID_KEY, newEntry.id!);\n        localStorage.setItem(FOCUSED_GOAL_VISION_TYPE_KEY, 'goalAchievementExperience');\n      } else if (selectedProcessType === 'bestCaseScenario') {\n        if (!bestCaseScenarioText.trim()) {\n            toast({ title: 'Incomplete Entry', description: 'Please describe your best case scenario.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if (bestCaseScenarioText.trim() && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for the best case scenario.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.bestCaseScenarioText = bestCaseScenarioText.trim();\n        localStorage.setItem(FOCUSED_GOAL_VISION_ID_KEY, newEntry.id!);\n        localStorage.setItem(FOCUSED_GOAL_VISION_TYPE_KEY, 'bestCaseScenario');\n      } else if (selectedProcessType === 'bestCasePlusActions') {\n        if (!bestCaseScenarioText.trim() || !actionsListText.trim() || !actionsCertaintyWhyNotText.trim()) {\n             toast({ title: 'Incomplete Entry', description: 'Please fill all fields for the Best Case Scenario + List of Actions.', variant: 'default' });\n             setIsLoadingAi(false); return;\n        }\n        if ((bestCaseScenarioText.trim() || actionsListText.trim() || actionsCertaintyWhyNotText.trim()) && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for this process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.bestCaseScenarioText = bestCaseScenarioText.trim();\n        newEntry.actionsListText = actionsListText.trim();\n        newEntry.actionsCertaintyWhyNotText = actionsCertaintyWhyNotText.trim();\n      } else if (selectedProcessType === 'performingThisAction') {\n        if (!actionFeelingInitial.trim() && !actionFeelingDesired.trim() && !actionCharacteristicsNeeded.trim() && !actionCharacteristicsWithout.trim() && !actionCharacteristicsWith.trim() && !actionUnderstandingNeeded.trim() && !actionUnderstandingWithout.trim() && !actionUnderstandingWith.trim() ) {\n             toast({ title: 'Incomplete Entry', description: 'Please fill at least one field for Performing this action.', variant: 'default' });\n             setIsLoadingAi(false); return;\n        }\n         if ((actionFeelingInitial.trim() || actionFeelingDesired.trim() || actionCharacteristicsNeeded.trim() || actionCharacteristicsWithout.trim() || actionCharacteristicsWith.trim() || actionUnderstandingNeeded.trim() || actionUnderstandingWithout.trim() || actionUnderstandingWith.trim()) && !insightsText.trim()) {\n            toast({ title: 'Missing Insights', description: 'Please provide your insights for this process.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        newEntry.actionFeelingInitial = actionFeelingInitial.trim() ? actionFeelingInitial.trim() : undefined;\n        newEntry.actionFeelingDesired = actionFeelingDesired.trim() ? actionFeelingDesired.trim() : undefined;\n        newEntry.actionCharacteristicsNeeded = actionCharacteristicsNeeded.trim() ? actionCharacteristicsNeeded.trim() : undefined;\n        newEntry.actionCharacteristicsWithout = actionCharacteristicsWithout.trim() ? actionCharacteristicsWithout.trim() : undefined;\n        newEntry.actionCharacteristicsWith = actionCharacteristicsWith.trim() ? actionCharacteristicsWith.trim() : undefined;\n        newEntry.actionUnderstandingNeeded = actionUnderstandingNeeded.trim() ? actionUnderstandingNeeded.trim() : undefined;\n        newEntry.actionUnderstandingWithout = actionUnderstandingWithout.trim() ? actionUnderstandingWithout.trim() : undefined;\n        newEntry.actionUnderstandingWith = actionUnderstandingWith.trim() ? actionUnderstandingWith.trim() : undefined;\n      } else if (selectedProcessType === 'otherViewpoint') {\n        if (!insightsText.trim() && !goalImprovementText.trim()) {\n            toast({ title: 'No Reflections', description: 'Consider adding insights or goal improvements for The other viewpoint.', variant: 'default' });\n            // Allow saving even without insights for this specific process, as it's informational\n        }\n        newEntry.otherViewpointReflections = insightsText.trim() ? insightsText.trim() : undefined; // Using insightsText for reflections\n        // goalImprovementText is already handled globally\n      } else if (selectedProcessType === 'arcTriangle') {\n        const isAffinityPartiallyFilled = arcAffinityWhyNot.trim() || arcAffinityExperienceInstead.trim() || arcAffinityRealizations.trim();\n        const isRealityPartiallyFilled = arcRealityWhyNot.trim() || arcRealityExperienceInstead.trim() || arcRealityRealizations.trim();\n        const isCommunicationPartiallyFilled = arcCommunicationWhyNot.trim() || arcCommunicationExperienceInstead.trim() || arcCommunicationRealizations.trim();\n\n        if ( (arcAffinityMyRating < 10 || arcAffinityGoalRating < 10) && !arcAffinityWhyNot.trim() ) {\n            toast({ title: 'Missing ARC Info', description: 'Please explain why Affinity ratings are not 10/10.', variant: 'default' }); setIsLoadingAi(false); return;\n        }\n        if ( (arcRealityMyAgreementRating < 10 || arcRealityFateAgreementRating < 10) && !arcRealityWhyNot.trim() ) {\n            toast({ title: 'Missing ARC Info', description: 'Please explain why Reality ratings are not 10/10.', variant: 'default' }); setIsLoadingAi(false); return;\n        }\n        if ( (arcCommunicationOutflowRating < 10 || arcCommunicationInflowRating < 10) && !arcCommunicationWhyNot.trim() ) {\n            toast({ title: 'Missing ARC Info', description: 'Please explain why Communication ratings are not 10/10.', variant: 'default' }); setIsLoadingAi(false); return;\n        }\n\n        if ( (isAffinityPartiallyFilled || isRealityPartiallyFilled || isCommunicationPartiallyFilled) && \n             !insightsText.trim() && !arcAffinityRealizations.trim() && !arcRealityRealizations.trim() && !arcCommunicationRealizations.trim() ) {\n            toast({ title: 'Missing Insights', description: 'Please provide your realizations for the ARC Triangle or general insights.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n\n        newEntry.arcAffinityMyRating = arcAffinityMyRating;\n        newEntry.arcAffinityGoalRating = arcAffinityGoalRating;\n        newEntry.arcAffinityWhyNot = (arcAffinityMyRating < 10 || arcAffinityGoalRating < 10) ? arcAffinityWhyNot.trim() : undefined;\n        newEntry.arcAffinityExperienceInstead = arcAffinityExperienceInstead.trim() ? arcAffinityExperienceInstead.trim() : undefined;\n        newEntry.arcAffinityRealizations = arcAffinityRealizations.trim() ? arcAffinityRealizations.trim() : undefined;\n\n        newEntry.arcRealityMyAgreementRating = arcRealityMyAgreementRating;\n        newEntry.arcRealityFateAgreementRating = arcRealityFateAgreementRating;\n        newEntry.arcRealityWhyNot = (arcRealityMyAgreementRating < 10 || arcRealityFateAgreementRating < 10) ? arcRealityWhyNot.trim() : undefined;\n        newEntry.arcRealityExperienceInstead = arcRealityExperienceInstead.trim() ? arcRealityExperienceInstead.trim() : undefined;\n        newEntry.arcRealityRealizations = arcRealityRealizations.trim() ? arcRealityRealizations.trim() : undefined;\n\n        newEntry.arcCommunicationOutflowRating = arcCommunicationOutflowRating;\n        newEntry.arcCommunicationInflowRating = arcCommunicationInflowRating;\n        newEntry.arcCommunicationWhyNot = (arcCommunicationOutflowRating < 10 || arcCommunicationInflowRating < 10) ? arcCommunicationWhyNot.trim() : undefined;\n        newEntry.arcCommunicationExperienceInstead = arcCommunicationExperienceInstead.trim() ? arcCommunicationExperienceInstead.trim() : undefined;\n        newEntry.arcCommunicationRealizations = arcCommunicationRealizations.trim() ? arcCommunicationRealizations.trim() : undefined;\n      } else if (selectedProcessType === 'emt') {\n        if (!emtExperienceDescription.trim()) {\n            toast({ title: 'Incomplete EMT Process', description: 'Please describe the experience.', variant: 'default' });\n            setIsLoadingAi(false); return;\n        }\n        if ((emtExperienceDescription.trim() || emtPositiveParts.trim() || emtNegativeParts.trim()) && !insightsText.trim()) {\n             toast({ title: 'Missing Insights', description: 'Please provide your insights for this EMT process.', variant: 'default' });\n             setIsLoadingAi(false); return;\n        }\n        newEntry.emtExperienceDescription = emtExperienceDescription.trim();\n        newEntry.emtInitialRating = emtInitialRating;\n        newEntry.emtPositiveParts = emtPositiveParts.trim() ? emtPositiveParts.trim() : undefined;\n        newEntry.emtNegativeParts = emtNegativeParts.trim() ? emtNegativeParts.trim() : undefined;\n        newEntry.emtNeedsDifferentBetter = emtNeedsDifferentBetter.trim() ? emtNeedsDifferentBetter.trim() : undefined;\n        newEntry.emtModifiedRating = emtModifiedRating;\n        newEntry.emtNeedsDifferentEvenBetter = emtNeedsDifferentEvenBetter.trim() ? emtNeedsDifferentEvenBetter.trim() : undefined;\n        newEntry.emtHappenedBefore = emtHappenedBefore.trim() ? emtHappenedBefore.trim() : undefined;\n        newEntry.emtExperienceNow = emtExperienceNow.trim() ? emtExperienceNow.trim() : undefined;\n        newEntry.emtFinalRating = emtFinalRating;\n      }\n      \n      newEntry.entryText = ''; \n\n      setJournalHistory(prevHistory => {\n         const updatedHistory = [newEntry as JournalEntry, ...prevHistory.filter(\n            entry => entry.isFailProof === true || \n                     (entry.failureReason && entry.failureReason.trim() !== '') || \n                     entry.goalWantRating !== undefined ||\n                     (entry.bestCaseScenarioText && entry.bestCaseScenarioText.trim() !== '') ||\n                     (entry.goalAchievementExperienceText && entry.goalAchievementExperienceText.trim() !== '') ||\n                     (entry.actionsListText && entry.actionsListText.trim() !== '') ||\n                     (entry.actionsCertaintyWhyNotText && entry.actionsCertaintyWhyNotText.trim() !== '') ||\n                     (entry.actionFeelingInitial && entry.actionFeelingInitial.trim() !== '') ||\n                     entry.arcAffinityMyRating !== undefined ||\n                     entry.emtExperienceDescription !== undefined ||\n                     entry.otherViewpointReflections !== undefined ||\n                     entry.inBetweenOutcome1?.trim() !== '' ||\n                     entry.inBetweenOutcome2?.trim() !== '' ||\n                     entry.inBetweenOutcome3?.trim() !== '' ||\n                     entry.inBetweenOutcome4?.trim() !== '' ||\n                     entry.inBetweenOutcome5?.trim() !== '' ||\n                     entry.inBetweenOutcome6?.trim() !== '' ||\n                     entry.inBetweenOutcome7?.trim() !== '' ||\n                     entry.inBetweenOutcome8?.trim() !== '' ||\n                     entry.inBetweenOutcome9?.trim() !== '' ||\n                     entry.inBetweenOutcome10?.trim() !== ''\n        )];\n        try {\n          localStorage.setItem(JOURNAL_HISTORY_KEY, JSON.stringify(updatedHistory));\n        } catch (error) {\n          console.error(\"Failed to save journal history to localStorage:\", error);\n          toast({ title: \"Storage Error\", description: \"Could not save your journal entry due to storage limitations.\", variant: \"destructive\" });\n        }\n        return updatedHistory;\n      });\n\n      resetAllFields();\n\n      toast({\n        title: 'Progress Saved',\n        description: 'Your processing details have been recorded.',\n      });\n    } catch (error) {\n      console.error('Error saving processing entry:', error);\n      toast({ title: 'Error', description: 'Could not save your processing entry. Please try again.', variant: \"destructive\" });\n    } finally {\n      setIsLoadingAi(false);\n    }\n  }, [\n    toast, selectedProcessType, canGoalFail, failureReason, leftHandText, rightHandText, insightsText, \n    goalImprovementText, showProcessingResults, categorizedFailureOutput, \n    goalWantRating, whyNotTenRatingReason, goalWantReasons, bestCaseScenarioText, goalAchievementExperienceText,\n    actionsListText, actionsCertaintyWhyNotText, actionFeelingInitial, actionFeelingDesired, \n    actionCharacteristicsNeeded, actionCharacteristicsWithout, actionCharacteristicsWith,\n    actionUnderstandingNeeded, actionUnderstandingWithout, actionUnderstandingWith,\n    arcAffinityMyRating, arcAffinityGoalRating, arcAffinityWhyNot, arcAffinityExperienceInstead, arcAffinityRealizations,\n    arcRealityMyAgreementRating, arcRealityFateAgreementRating, arcRealityWhyNot, arcRealityExperienceInstead, arcRealityRealizations,\n    arcCommunicationOutflowRating, arcCommunicationInflowRating, arcCommunicationWhyNot, arcCommunicationExperienceInstead, arcCommunicationRealizations,\n    emtExperienceDescription, emtInitialRating, emtPositiveParts, emtNegativeParts, emtNeedsDifferentBetter, emtModifiedRating,\n    emtNeedsDifferentEvenBetter, emtHappenedBefore, emtExperienceNow, emtFinalRating\n  ]);\n\n  const getSpecialCaseBarrierDescription = (category?: string): { text: string; useSemicolon: boolean } | null => {\n    if (!category) return null;\n    switch (category) {\n      case 'POSSIBLE_OUTCOME':\n        return { text: 'Possible outcome', useSemicolon: false };\n      case 'PAST_TRAIT':\n        return { text: 'behaviour in the past', useSemicolon: true };\n      case 'ABSOLUTE_TRUTH':\n        return { text: 'Absolute truth', useSemicolon: false };\n      default:\n        return { text: 'General', useSemicolon: false }; \n    }\n  };\n  \n  const resetAllFields = (keepProcessSelection = false) => {\n    if (!keepProcessSelection) {\n        setSelectedProcessType(null);\n    }\n    // Impossible to Fail\n    setCanGoalFail(null);\n    setFailureReason('');\n    setLeftHandText('');\n    setRightHandText('');\n    setShowProcessingResults(false);\n    setCategorizedFailureOutput(null);\n\n    // Goal Desirability\n    setGoalWantRating(10);\n    setWhyNotTenRatingReason('');\n    setGoalWantReasons('');\n\n    // Best Case & Goal Achievement\n    setBestCaseScenarioText('');\n    setGoalAchievementExperienceText('');\n\n    // Best Case Scenario + List of Actions (includes former Actions Certainty)\n    setActionsListText('');\n    setActionsCertaintyWhyNotText('');\n\n    // Performing this action (Detailed Action Process)\n    setActionFeelingInitial('');\n    setActionFeelingDesired('');\n    setActionCharacteristicsNeeded('');\n    setActionCharacteristicsWithout('');\n    setActionCharacteristicsWith('');\n    setActionUnderstandingNeeded('');\n    setActionUnderstandingWithout('');\n    setActionUnderstandingWith('');\n\n    // ARC Triangle\n    setArcAffinityMyRating(10);\n    setArcAffinityGoalRating(10);\n    setArcAffinityWhyNot('');\n    setArcAffinityExperienceInstead('');\n    setArcAffinityRealizations('');\n    setArcRealityMyAgreementRating(10);\n    setArcRealityFateAgreementRating(10);\n    setArcRealityWhyNot('');\n    setArcRealityExperienceInstead('');\n    setArcRealityRealizations('');\n    setArcCommunicationOutflowRating(10);\n    setArcCommunicationInflowRating(10);\n    setArcCommunicationWhyNot('');\n    setArcCommunicationExperienceInstead('');\n    setArcCommunicationRealizations('');\n\n    // EMT Process\n    setEmtExperienceDescription('');\n    setEmtInitialRating(0);\n    setEmtPositiveParts('');\n    setEmtNegativeParts('');\n    setEmtNeedsDifferentBetter('');\n    setEmtModifiedRating(0);\n    setEmtNeedsDifferentEvenBetter('');\n    setEmtHappenedBefore('');\n    setEmtExperienceNow('');\n    setEmtFinalRating(0);\n\n    // Common (including for 'otherViewpoint')\n    setInsightsText('');\n    setGoalImprovementText('');\n    \n    if (!keepProcessSelection) {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }\n\n  const renderReflectionSection = () => (\n    <>\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <MessageSquareHeart className=\"mr-2 h-6 w-6 text-primary\"/> Conclusions about the process\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Is there something you could conclude about this process, about possibilities for its achievement? (Usually something about how you could resolve that barrier)\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Label htmlFor=\"insightsText\" className=\"text-base\">Your Conclusions:</Label>\n                <Textarea\n                    id=\"insightsText\"\n                    value={insightsText}\n                    onChange={(e) => setInsightsText(e.target.value)}\n                    placeholder=\"e.g., I realize I can break down the cost, or seek alternative cheaper solutions...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n            </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <Target className=\"mr-2 h-6 w-6 text-primary\"/> Goal Improvement\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Does the process you did suggest some improvements or better definition of your goal? Should you add something, remove something or change something to make it more attractive and better defined?\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Textarea\n                    id=\"goalImprovementText\"\n                    value={goalImprovementText}\n                    onChange={(e) => setGoalImprovementText(e.target.value)}\n                    placeholder=\"e.g., Make $5000 a month with breaking down the cost for my business\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n            </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden border-primary\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                    <RefreshCw className=\"mr-2 h-6 w-6 text-primary\"/> Repeat the Process\n                </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-2 space-y-3\">\n                <p className=\"text-base text-foreground\">\n                    Do the Impossible to Fail process atleast 3 times.\n                </p>\n                 <Button \n                    variant={'outline'} \n                    onClick={() => {\n                        resetAllFields();\n                        toast({\n                            title: \"Process Reset\",\n                            description: \"You can now select a new process or re-evaluate the current one from the start.\",\n                        });\n                    }}\n                    className=\"mt-2\"\n                >\n                    <RefreshCw className=\"mr-2 h-4 w-4\" /> Start New Process\n                </Button>\n            </CardContent>\n        </Card>\n    </>\n  );\n\n  const isSaveButtonDisabled = () => {\n    if (isLoadingAi || selectedProcessType === null) return true;\n\n    const noGeneralInputs = !insightsText.trim() && !goalImprovementText.trim();\n\n    if (selectedProcessType === 'impossibleToFail') {\n        if (canGoalFail === null) return true; \n        if (canGoalFail === true) { \n            if (!showProcessingResults && noGeneralInputs) return true;\n            if (showProcessingResults && noGeneralInputs) return true; \n        }\n        // If canGoalFail is false, it's saveable without other inputs\n        if (canGoalFail === false && noGeneralInputs) return false;\n        return false; \n    }\n\n    if (selectedProcessType === 'goalDesirability') {\n        if (goalWantRating < 10) {\n            if (!whyNotTenRatingReason.trim() || !goalWantReasons.trim()) return true;\n            if (noGeneralInputs && !whyNotTenRatingReason.trim() && !goalWantReasons.trim()) return true;\n        }\n         if (noGeneralInputs && goalWantRating === 10) return false; \n         if (goalWantRating < 10 && (!whyNotTenRatingReason.trim() || !goalWantReasons.trim())) return true;\n         if (goalWantRating < 10 && (whyNotTenRatingReason.trim() || goalWantReasons.trim()) && noGeneralInputs) return true;\n        return false;\n    }\n\n    if (selectedProcessType === 'goalAchievementExperience') {\n        if (!goalAchievementExperienceText.trim() && noGeneralInputs) return true;\n         if (!goalAchievementExperienceText.trim()) return true; // Must have achievement text\n        return false;\n    }\n\n    if (selectedProcessType === 'bestCaseScenario') {\n        if (!bestCaseScenarioText.trim() && noGeneralInputs) return true;\n         if (!bestCaseScenarioText.trim()) return true; // Must have best case text\n        return false;\n    }\n\n    if (selectedProcessType === 'bestCasePlusActions') {\n        if ((!bestCaseScenarioText.trim() || !actionsListText.trim() || !actionsCertaintyWhyNotText.trim()) && noGeneralInputs ) return true;\n        if (!bestCaseScenarioText.trim() || !actionsListText.trim() || !actionsCertaintyWhyNotText.trim()) return true;\n        return false;\n    }\n    \n    if (selectedProcessType === 'performingThisAction') {\n        const noDetailedInputs = !actionFeelingInitial.trim() && !actionFeelingDesired.trim() && !actionCharacteristicsNeeded.trim() && !actionCharacteristicsWithout.trim() && !actionCharacteristicsWith.trim() && !actionUnderstandingNeeded.trim() && !actionUnderstandingWithout.trim() && !actionUnderstandingWith.trim();\n        if (noDetailedInputs && noGeneralInputs) return true;\n        return false;\n    }\n\n    if (selectedProcessType === 'otherViewpoint') {\n        if (noGeneralInputs) return false; // Can save with only the description being present\n        return false;\n    }\n\n\n    if (selectedProcessType === 'arcTriangle') {\n        const noArcInputs = \n            !arcAffinityWhyNot.trim() && !arcAffinityExperienceInstead.trim() && !arcAffinityRealizations.trim() &&\n            !arcRealityWhyNot.trim() && !arcRealityExperienceInstead.trim() && !arcRealityRealizations.trim() &&\n            !arcCommunicationWhyNot.trim() && !arcCommunicationExperienceInstead.trim() && !arcCommunicationRealizations.trim();\n        \n        if ((arcAffinityMyRating < 10 || arcAffinityGoalRating < 10) && !arcAffinityWhyNot.trim()) return true;\n        if ((arcRealityMyAgreementRating < 10 || arcRealityFateAgreementRating < 10) && !arcRealityWhyNot.trim()) return true;\n        if ((arcCommunicationOutflowRating < 10 || arcCommunicationInflowRating < 10) && !arcCommunicationWhyNot.trim()) return true;\n\n        if (noArcInputs && noGeneralInputs) return true;\n        \n        if (arcAffinityRealizations.trim() || arcRealityRealizations.trim() || arcCommunicationRealizations.trim()) return false;\n        if (insightsText.trim() || goalImprovementText.trim()) return false;\n        if (arcAffinityMyRating === 10 && arcAffinityGoalRating === 10 &&\n            arcRealityMyAgreementRating === 10 && arcRealityFateAgreementRating === 10 &&\n            arcCommunicationOutflowRating === 10 && arcCommunicationInflowRating === 10 &&\n            noArcInputs && noGeneralInputs) return false; \n\n        const affinityFilled = arcAffinityWhyNot.trim() || arcAffinityExperienceInstead.trim();\n        const realityFilled = arcRealityWhyNot.trim() || arcRealityExperienceInstead.trim();\n        const communicationFilled = arcCommunicationWhyNot.trim() || arcCommunicationExperienceInstead.trim();\n\n        if (affinityFilled && !arcAffinityRealizations.trim() && noGeneralInputs) return true;\n        if (realityFilled && !arcRealityRealizations.trim() && noGeneralInputs) return true;\n        if (communicationFilled && !arcCommunicationRealizations.trim() && noGeneralInputs) return true;\n        \n        return false;\n    }\n\n    if (selectedProcessType === 'emt') {\n        if (!emtExperienceDescription.trim()) return true; \n        if (!emtExperienceDescription.trim() && noGeneralInputs) return true;\n        if (emtExperienceDescription.trim() && noGeneralInputs && !emtPositiveParts.trim() && !emtNegativeParts.trim()) return true; \n        return false;\n    }\n\n    return true; \n  };\n\n  const getSaveButtonText = () => {\n    return \"Ok\";\n  };\n\n  const processButtons = [\n    { type: 'impossibleToFail' as ProcessType, label: 'Impossible to Fail', icon: ShieldCheck, color: 'text-accent' },\n    { type: 'goalDesirability' as ProcessType, label: 'How much do you want your goal?', icon: Heart, color: 'text-red-500' },\n    { type: 'goalAchievementExperience' as ProcessType, label: 'Goal Achievement Experience', icon: Award, color: 'text-blue-500' },\n    { type: 'bestCaseScenario' as ProcessType, label: 'Best Case Scenario', icon: Sun, color: 'text-yellow-500' },\n    { type: 'bestCasePlusActions' as ProcessType, label: 'Best Case Scenario + List of Actions', icon: ListOrdered, color: 'text-indigo-500' },\n    { type: 'performingThisAction' as ProcessType, label: 'Performing this action', icon: Workflow, color: 'text-pink-500' },\n    { type: 'otherViewpoint' as ProcessType, label: 'The other viewpoint', icon: Milestone, color: 'text-teal-500' },\n    { type: 'arcTriangle' as ProcessType, label: 'ARC Triangle', icon: Triangle, color: 'text-green-500' },\n    { type: 'emt' as ProcessType, label: 'EMT', icon: Wand, color: 'text-orange-500' },\n  ];\n\n\n  return (\n    <div className=\"container mx-auto max-w-3xl py-8 px-4 flex flex-col gap-8\">\n      {selectedProcessType === null ? (\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader className=\"bg-card\">\n            <CardTitle className=\"text-2xl font-semibold text-foreground flex items-center\">\n              <ListChecks className=\"mr-3 h-7 w-7 text-primary\"/>Choose Your Focus\n            </CardTitle>\n            <CardDescription className=\"text-base text-muted-foreground pt-2\">\n              Select which aspect of your goal you&apos;d like to process. You can switch or repeat processes as needed.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6 grid grid-cols-1 sm:grid-cols-1 gap-4\">\n            {processButtons.map(proc => (\n                <Button \n                    key={proc.type}\n                    onClick={() => { setSelectedProcessType(proc.type); resetAllFields(true);}} \n                    size=\"lg\" \n                    className=\"py-6 text-lg justify-start pl-4\"\n                    variant=\"outline\"\n                >\n                    <proc.icon className={cn(\"mr-3 h-6 w-6\", proc.color)} /> {proc.label}\n                </Button>\n            ))}\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          <div className=\"flex justify-start mb-0\">\n            <Button variant=\"outline\" onClick={() => resetAllFields()} size=\"sm\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back\n            </Button>\n          </div>\n\n          {/* Impossible to Fail */}\n          {selectedProcessType === 'impossibleToFail' && (\n            <>\n              <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-primary/30\">\n                  <CardTitle className=\"text-xl font-semibold text-primary-foreground\">\n                    Impossible to Fail\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-3\">\n                    <p className=\"text-foreground text-base\">\n                      Pay attention to your goal, is it possible to fail?\n                    </p>\n                    <div className=\"flex flex-wrap gap-4 pt-1\">\n                      <Button \n                        variant={canGoalFail === true ? 'default' : 'outline'} \n                        onClick={() => handleSetCanGoalFail(true)}\n                        className=\"flex-grow sm:flex-grow-0\"\n                      >\n                        <XCircle className=\"mr-2 h-5 w-5\" /> Yes, failure is possible\n                      </Button>\n                      <Button \n                        variant={canGoalFail === false ? 'default' : 'outline'} \n                        onClick={() => handleSetCanGoalFail(false)}\n                        className={cn(\n                          \"flex-grow sm:flex-grow-0\",\n                          canGoalFail === false && \"!bg-accent !text-accent-foreground hover:!bg-accent/90\"\n                        )}\n                      >\n                        <CheckCircle className=\"mr-2 h-5 w-5\" /> No, it&apos;s fail-proof\n                      </Button>\n                    </div>\n                </CardContent>\n              </Card>\n\n              {canGoalFail === true && (\n                <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                  <CardHeader>\n                    <CardTitle className=\"text-xl font-semibold text-foreground\">\n                      Standard 10F Process\n                    </CardTitle>\n                    <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                      If your goal could fail, describe how that might happen.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-6 space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"failureReason\" className=\"text-base\">How could your goal potentially fail?</Label>\n                      <Textarea\n                        id=\"failureReason\"\n                        value={failureReason}\n                        onChange={(e) => {\n                          setFailureReason(e.target.value);\n                          setShowProcessingResults(false); \n                          setCategorizedFailureOutput(null);\n                        }}\n                        placeholder=\"e.g., It is too expensive, I might lose motivation, unexpected events, I am lazy...\"\n                        rows={3}\n                        className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                      />\n                    </div>\n                    <Button \n                      onClick={handleFailureProcessing} \n                      disabled={isProcessingFailure || !failureReason.trim()}\n                      className=\"w-full sm:w-auto bg-accent text-accent-foreground hover:bg-accent/90 focus-visible:ring-ring px-6 py-3 text-base\"\n                      aria-label=\"Process Potential Failure Mode\"\n                    >\n                      {isProcessingFailure ? (\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                      ) : (\n                        <Lightbulb className=\"mr-2 h-5 w-5\" />\n                      )}\n                      Process\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n\n              {canGoalFail === false && (\n                 <Card className=\"shadow-lg rounded-xl overflow-hidden border-accent\">\n                    <CardHeader>\n                      <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                        <ShieldCheck className=\"mr-2 h-6 w-6 text-accent\" /> Goal Confidence\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-2\">\n                      <p className=\"text-base text-foreground\">\n                        Great! You now know your goal is impossible to fail.\n                      </p>\n                    </CardContent>\n                  </Card>\n              )}\n\n              {showProcessingResults && canGoalFail === true && (\n                <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                  <CardHeader>\n                    <CardTitle className=\"text-xl font-semibold text-foreground\">10F Process</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-6 space-y-6\">\n                  {categorizedFailureOutput?.category && (() => {\n                    const descInfo = getSpecialCaseBarrierDescription(categorizedFailureOutput.category);\n                    if (!descInfo) return null;\n                    return (\n                      <div className=\"p-3 bg-primary/10 rounded-md border border-primary/30 text-sm text-primary-foreground flex items-start gap-2\">\n                        <Info className=\"h-5 w-5 mt-0.5 shrink-0\" />\n                        <p>\n                          <span className=\"font-semibold\">\n                            Special case barrier{descInfo.useSemicolon ? ';' : ':'} {descInfo.text}\n                          </span>\n                        </p>\n                      </div>\n                    );\n                  })()}\n                    <h4 className=\"text-lg font-semibold text-foreground\">Do the 10F processing:</h4>\n                    <Card className=\"bg-card border-destructive/50\">\n                      <CardHeader>\n                        <CardTitle className=\"text-md font-semibold text-destructive flex items-center\">\n                          <AlertTriangle className=\"mr-2 h-5 w-5 text-destructive\" /> Left Hand\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-base text-foreground\">{leftHandText}</p>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-card border-accent/50\">\n                      <CardHeader>\n                        <CardTitle className=\"text-md font-semibold text-accent-foreground flex items-center\">\n                          <Lightbulb className=\"mr-2 h-5 w-5 text-accent\" /> Right Hand\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-base text-foreground\">{rightHandText}</p>\n                      </CardContent>\n                    </Card>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n\n          {/* Goal Desirability */}\n          {selectedProcessType === 'goalDesirability' && (\n            <>\n              <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-secondary/30\">\n                  <CardTitle className=\"text-xl font-semibold text-secondary-foreground flex items-center\">\n                    <Heart className=\"mr-3 h-6 w-6\"/>How much do you want your goal?\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"goalWantRating\" className=\"text-base\">From 0-10, how much do you want your goal?</Label>\n                    <div className=\"flex items-center gap-4\">\n                      <Slider\n                        id=\"goalWantRating\"\n                        min={0}\n                        max={10}\n                        step={1}\n                        value={[goalWantRating]}\n                        onValueChange={(value) => setGoalWantRating(value[0])}\n                        className=\"flex-grow\"\n                        aria-label=\"Goal want rating slider\"\n                      />\n                      <span className=\"text-base font-medium w-10 text-right text-foreground\">{goalWantRating}</span>\n                    </div>\n                  </div>\n\n                  {goalWantRating < 10 && (\n                    <>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"whyNotTenRatingReason\" className=\"text-base\">Why is it not 10/10?</Label>\n                        <Textarea\n                          id=\"whyNotTenRatingReason\"\n                          value={whyNotTenRatingReason}\n                          onChange={(e) => setWhyNotTenRatingReason(e.target.value)}\n                          placeholder=\"e.g., I have some doubts, it requires a lot of effort...\"\n                          rows={3}\n                          className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"goalWantReasons\" className=\"text-base\">Reason(s) for wanting your goal (one or two):</Label>\n                        <Textarea\n                          id=\"goalWantReasons\"\n                          value={goalWantReasons}\n                          onChange={(e) => setGoalWantReasons(e.target.value)}\n                          placeholder=\"e.g., It will improve my health, It will bring me joy...\"\n                          rows={3}\n                          className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                        />\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {goalWantRating === 10 && selectedProcessType === 'goalDesirability' && (\n                <Card className=\"shadow-lg rounded-xl overflow-hidden border-accent\">\n                    <CardHeader>\n                      <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                        <Star className=\"mr-2 h-6 w-6 text-accent\" /> Goal Commitment\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-2\">\n                      <p className=\"text-base text-foreground\">\n                        Great! You know you want your goal 100%!\n                      </p>\n                    </CardContent>\n                  </Card>\n              )}\n            </>\n          )}\n\n          {/* Goal Achievement Experience */}\n          {selectedProcessType === 'goalAchievementExperience' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-primary/10\">\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                  <Award className=\"mr-3 h-6 w-6\"/>Goal Achievement Experience\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Imagine you have successfully achieved your goal. Describe this experience in detail. What do you see, hear, feel?\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"goalAchievementExperienceText\" className=\"text-base\">Describe your goal achievement experience:</Label>\n                  <Textarea\n                    id=\"goalAchievementExperienceText\"\n                    value={goalAchievementExperienceText}\n                    onChange={(e) => setGoalAchievementExperienceText(e.target.value)}\n                    placeholder=\"e.g., I feel a wave of accomplishment and pride. I'm celebrating with friends and family. This opens doors to...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Best Case Scenario */}\n          {selectedProcessType === 'bestCaseScenario' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-accent/10\">\n                <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                  <Sun className=\"mr-3 h-6 w-6\"/>Best Case Scenario\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Envision the most positive outcome for your goal. How does it look and feel?\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bestCaseScenarioText\" className=\"text-base\">Describe your best case scenario for this goal:</Label>\n                  <Textarea\n                    id=\"bestCaseScenarioText\"\n                    value={bestCaseScenarioText}\n                    onChange={(e) => setBestCaseScenarioText(e.target.value)}\n                    placeholder=\"e.g., I achieve my goal effortlessly, new opportunities open up, I feel immense joy and satisfaction...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Best Case Scenario + List of Actions */}\n          {selectedProcessType === 'bestCasePlusActions' && (\n            <>\n              <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-accent/10\">\n                  <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                    <ListOrdered className=\"mr-3 h-6 w-6\"/>Best Case Scenario + List of Actions\n                  </CardTitle>\n                  <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Envision your best outcome, list actions, and assess your certainty.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bestCaseScenarioTextPlusActions\" className=\"text-base\">Describe your best case scenario for this goal:</Label>\n                    <Textarea\n                      id=\"bestCaseScenarioTextPlusActions\"\n                      value={bestCaseScenarioText}\n                      onChange={(e) => setBestCaseScenarioText(e.target.value)}\n                      placeholder=\"e.g., I achieve my goal effortlessly...\"\n                      rows={3}\n                      className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"actionsListText\" className=\"text-base\">List the actions to take:</Label>\n                    <Textarea\n                      id=\"actionsListText\"\n                      value={actionsListText}\n                      onChange={(e) => setActionsListText(e.target.value)}\n                      placeholder=\"e.g., 1. Research options. 2. Make a plan. 3. Execute step 1...\"\n                      rows={4}\n                      className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"actionsCertaintyWhyNotTextBPA\" className=\"text-base\">If I take all the actions included, am I absolutely certain my actions will get to my goal? Why not?</Label>\n                    <Textarea\n                      id=\"actionsCertaintyWhyNotTextBPA\"\n                      value={actionsCertaintyWhyNotText}\n                      onChange={(e) => setActionsCertaintyWhyNotText(e.target.value)}\n                      placeholder=\"e.g., External factors, unexpected delays, resource limitations...\"\n                      rows={3}\n                      className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n\n          {/* Performing this action */}\n          {selectedProcessType === 'performingThisAction' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-primary/10\">\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                  <Workflow className=\"mr-3 h-6 w-6\"/>Performing this action\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Deep dive into a specific action: feelings, characteristics, and understanding.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionFeelingInitial\" className=\"text-base\">How will I feel going into this action?</Label>\n                  <Textarea\n                    id=\"actionFeelingInitial\"\n                    value={actionFeelingInitial}\n                    onChange={(e) => setActionFeelingInitial(e.target.value)}\n                    placeholder=\"e.g., Anxious, excited, overwhelmed...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionFeelingDesired\" className=\"text-base\">How would I like to feel instead?</Label>\n                  <Textarea\n                    id=\"actionFeelingDesired\"\n                    value={actionFeelingDesired}\n                    onChange={(e) => setActionFeelingDesired(e.target.value)}\n                    placeholder=\"e.g., Confident, calm, focused...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                 <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionCharacteristicsNeeded\" className=\"text-base\">What characteristic(s) will I need to perform this action optimally?</Label>\n                  <Textarea\n                    id=\"actionCharacteristicsNeeded\"\n                    value={actionCharacteristicsNeeded}\n                    onChange={(e) => setActionCharacteristicsNeeded(e.target.value)}\n                    placeholder=\"e.g., Discipline, creativity, patience...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionCharacteristicsWithout\" className=\"text-base\">How will it be like if I don&apos;t have this characteristic(s)?</Label>\n                  <Textarea\n                    id=\"actionCharacteristicsWithout\"\n                    value={actionCharacteristicsWithout}\n                    onChange={(e) => setActionCharacteristicsWithout(e.target.value)}\n                    placeholder=\"e.g., Struggle, make mistakes, give up...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionCharacteristicsWith\" className=\"text-base\">How will it be if I do?</Label>\n                  <Textarea\n                    id=\"actionCharacteristicsWith\"\n                    value={actionCharacteristicsWith}\n                    onChange={(e) => setActionCharacteristicsWith(e.target.value)}\n                    placeholder=\"e.g., Smooth progress, enjoy the process, achieve better results...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                 <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionUnderstandingNeeded\" className=\"text-base\">What would I need to understand to perform this action optimally?</Label>\n                  <Textarea\n                    id=\"actionUnderstandingNeeded\"\n                    value={actionUnderstandingNeeded}\n                    onChange={(e) => setActionUnderstandingNeeded(e.target.value)}\n                    placeholder=\"e.g., The steps involved, potential challenges, the underlying principles...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionUnderstandingWithout\" className=\"text-base\">How would it be if I don&apos;t understand that?</Label>\n                  <Textarea\n                    id=\"actionUnderstandingWithout\"\n                    value={actionUnderstandingWithout}\n                    onChange={(e) => setActionUnderstandingWithout(e.target.value)}\n                    placeholder=\"e.g., Confusion, inefficiency, frustration...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actionUnderstandingWith\" className=\"text-base\">How would it be if I did?</Label>\n                  <Textarea\n                    id=\"actionUnderstandingWith\"\n                    value={actionUnderstandingWith}\n                    onChange={(e) => setActionUnderstandingWith(e.target.value)}\n                    placeholder=\"e.g., Clarity, effectiveness, adaptability...\"\n                    rows={2}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* The other viewpoint */}\n           {selectedProcessType === 'otherViewpoint' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-teal-500/10\">\n                <CardTitle className=\"text-xl font-semibold text-teal-700 flex items-center\">\n                  <Milestone className=\"mr-3 h-6 w-6\"/>The other viewpoint\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-6 space-y-3 text-base text-foreground\">\n                 <p>\n                  This technique is so simple, but so effective, that it&apos;s almost impossible to emphasize its importance enough.\n                </p>\n                <p>\n                  It is used for work on any relationship you have that you are not happy about. Whenever you have a conflict with somebody, misunderstanding, or any other relationship other than relationship of perfect love and harmony, you should do this technique.\n                </p>\n                <p>\n                  It&apos;s also precious for use in improving your relationships with the people you love in which they are not 10/10 perfect.\n                </p>\n                <p>\n                  Technique is simple. It is much like 10F process but with 3 elements instead of the standard 2 polarities that we usually do.\n                </p>\n                <div className=\"mt-2 space-y-1 pl-4 border-l-2 border-teal-500/50 py-1\">\n                    <p><strong>Left hand finger:</strong> Identify yourself with person you want to work on. Go into her viewpoint. Feel how it feels to be that person.</p>\n                    <p><strong>Right hand finger:</strong> &quot;What is my reaction, when other person is like that?&quot;</p>\n                    <p><strong>Two fingers of the right hand together:</strong> &quot;What would I like my reaction to be when this person is like that?&quot;</p>\n                </div>\n                <p className=\"mt-2\">\n                  Notice that we are working with 3 elements in this process, instead of two polarities. This process connects 2 pairs of polarities, which are connected: A: Other person&apos;s viewpoint and my reaction to that and B: My reaction and what I would like my reaction to be.\n                </p>\n                <p>\n                  As my reaction is common for the both pairs, we can connect these processes and deal with them in &quot;tree polarities&quot;. Of course, we don&apos;t have 3 hands, so we need to add something for the third element (having index finger and thumb connected on the right hand.\n                </p>\n                <h3 className=\"text-lg font-semibold text-teal-600 mt-4 pt-3 border-t border-teal-500/20\">Explanation:</h3>\n                <p>\n                  The fact is that for all people we have interactions with we have a mental picture about their experiences. We have an idea about how others feel, what is their attitude, why they do the things they do, and so on. Basically we project our mental image of their identity onto them.\n                </p>\n                <p>\n                  This mental image deeply influences the way we feel about others, how we perceive what they do, and what kind of relationship we have with them.\n                </p>\n                <p>\n                  If somebody brings you a deodorant as a present, you will feel differently if you perceive him as somebody who is trying to ridicule you (&quot;You stink. Here is a deodorant.&quot;) or if it&apos;s somebody who likes you (&quot;I really like this scent. I think you will love it.&quot;).\n                </p>\n                <p>\n                  This all depends on the mental picture you have about that person (on his/her viewpoint).\n                </p>\n                <p>\n                  When you do the process, you will dissolve the mental picture you have, and you will be able to perceive with this person as he/she really is.\n                </p>\n                <p>\n                  For persons that are important parts of your life (parents, spouse, love partner, kids, your boss...) it could be necessary to do this process more than once. It&apos;s logical. The mental image you have about them is based on hundreds of different experiences, and naturally much more complex and more emotionally charged. Do this process for important person again and again, until experience &quot;how is it to be... (your mother, for example)&quot; disappears.\n                </p>\n                <h4 className=\"text-md font-semibold text-teal-600 mt-3 pt-2 border-t border-teal-500/10\">Practical exercise:</h4>\n                <p>\n                  Do this process with identities of your mother, your father, your current spouse (boyfriend, or husband) and with your boss (or somebody else who&apos;s viewpoint is important in the area of work/earning money).\n                </p>\n                <p>\n                  Let me remind you. If you are doing this process with identity of your mother, this means:\n                </p>\n                <ul className=\"list-disc list-inside pl-4 space-y-1 mt-1\">\n                  <li><strong>Left hand finger:</strong> Identify yourself with your mother. Go into her viewpoint. Feel how it feels to be her.</li>\n                  <li><strong>Right hand finger:</strong> &quot;What is my reaction, when is my mother like that?&quot;</li>\n                  <li><strong>Two fingers of the right hand together:</strong> &quot;What would I like my reaction to be, when she is like that?&quot;</li>\n                </ul>\n                <p className=\"mt-1\">\n                  Do the same process with identities of your father, your current spouse and with the identity of your boss.\n                </p>\n                <h4 className=\"text-md font-semibold text-teal-600 mt-3 pt-2 border-t border-teal-500/10\">Practical exercise 2:</h4>\n                <p>\n                  I) Make the lists of people whom your life in the following categories:\n                </p>\n                <ol className=\"list-decimal list-inside pl-4 space-y-0.5 mt-1 text-sm\">\n                  <li>Persons I don&apos;t like.</li>\n                  <li>Persons I feel critical about.</li>\n                  <li>Persons who disappointed me.</li>\n                  <li>Persons who don&apos;t give me expected support.</li>\n                  <li>Persons that bother me in some way.</li>\n                  <li>Selfish persons.</li>\n                  <li>People who are dumb or incompetent.</li>\n                  <li>People who I am jealous of.</li>\n                  <li>Persons who hurt me.</li>\n                  <li>People who make me feel uncomfortable.</li>\n                  <li>People towards whom I feel envious for any reason.</li>\n                  <li>People of whom I am scared.</li>\n                  <li>People who disgust me.</li>\n                  <li>People I hate.</li>\n                  <li>Persons who were negative part of my life.</li>\n                </ol>\n                <p className=\"mt-1\">\n                  II) Do the process for dealing with projected identities (previous exercise) with all people you have on these lists.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* ARC Triangle */}\n          {selectedProcessType === 'arcTriangle' && (\n            <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n              <CardHeader className=\"bg-muted/30\">\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                  <Triangle className=\"mr-3 h-6 w-6\"/>ARC Triangle\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                  Explore Affinity, Reality, and Communication related to your goal.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                <Accordion type=\"multiple\" className=\"w-full space-y-4\">\n                  {/* Affinity Section */}\n                  <AccordionItem value=\"affinity\" className=\"border bg-card rounded-lg shadow-sm\">\n                    <AccordionTrigger className=\"px-4 py-3 text-lg font-medium hover:bg-muted/50 rounded-t-lg\">\n                      <div className=\"flex items-center\"> <Users className=\"mr-2 h-5 w-5 text-primary\"/> Affinity </div>\n                    </AccordionTrigger>\n                    <AccordionContent className=\"px-4 pt-2 pb-4 space-y-6 border-t\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcAffinityMyRating\" className=\"text-base\">How much do I love my goal? (0-10)</Label>\n                        <div className=\"flex items-center gap-4\">\n                          <Slider id=\"arcAffinityMyRating\" min={0} max={10} step={1} value={[arcAffinityMyRating]} onValueChange={(v) => setArcAffinityMyRating(v[0])} />\n                          <span className=\"text-base font-medium w-10 text-right\">{arcAffinityMyRating}</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcAffinityGoalRating\" className=\"text-base\">Does my goal love me? (0-10)</Label>\n                        <div className=\"flex items-center gap-4\">\n                          <Slider id=\"arcAffinityGoalRating\" min={0} max={10} step={1} value={[arcAffinityGoalRating]} onValueChange={(v) => setArcAffinityGoalRating(v[0])} />\n                          <span className=\"text-base font-medium w-10 text-right\">{arcAffinityGoalRating}</span>\n                        </div>\n                      </div>\n                      {(arcAffinityMyRating < 10 || arcAffinityGoalRating < 10) && (\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"arcAffinityWhyNot\" className=\"text-base\">Why is it not 10/10?</Label>\n                          <Textarea id=\"arcAffinityWhyNot\" value={arcAffinityWhyNot} onChange={(e) => setArcAffinityWhyNot(e.target.value)} placeholder=\"Explain any reservations or doubts...\" rows={3} />\n                        </div>\n                      )}\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcAffinityExperienceInstead\" className=\"text-base\">What would I like to experience instead?</Label>\n                        <Textarea id=\"arcAffinityExperienceInstead\" value={arcAffinityExperienceInstead} onChange={(e) => setArcAffinityExperienceInstead(e.target.value)} placeholder=\"Describe the ideal affinity experience...\" rows={3} />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcAffinityRealizations\" className=\"text-base\">Any realizations or conclusions about Affinity?</Label>\n                        <Textarea id=\"arcAffinityRealizations\" value={arcAffinityRealizations} onChange={(e) => setArcAffinityRealizations(e.target.value)} placeholder=\"Your insights on affinity...\" rows={3} />\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  {/* Reality Section */}\n                  <AccordionItem value=\"reality\" className=\"border bg-card rounded-lg shadow-sm\">\n                    <AccordionTrigger className=\"px-4 py-3 text-lg font-medium hover:bg-muted/50 rounded-t-lg\">\n                       <div className=\"flex items-center\"> <Eye className=\"mr-2 h-5 w-5 text-primary\"/> Reality </div>\n                    </AccordionTrigger>\n                    <AccordionContent className=\"px-4 pt-2 pb-4 space-y-6 border-t\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcRealityMyAgreementRating\" className=\"text-base\">Am I in complete agreement with my goal? (0-10)</Label>\n                        <div className=\"flex items-center gap-4\">\n                          <Slider id=\"arcRealityMyAgreementRating\" min={0} max={10} step={1} value={[arcRealityMyAgreementRating]} onValueChange={(v) => setArcRealityMyAgreementRating(v[0])} />\n                          <span className=\"text-base font-medium w-10 text-right\">{arcRealityMyAgreementRating}</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcRealityFateAgreementRating\" className=\"text-base\">Does fate/destiny agree with my goal? (0-10)</Label>\n                        <div className=\"flex items-center gap-4\">\n                          <Slider id=\"arcRealityFateAgreementRating\" min={0} max={10} step={1} value={[arcRealityFateAgreementRating]} onValueChange={(v) => setArcRealityFateAgreementRating(v[0])} />\n                           <span className=\"text-base font-medium w-10 text-right\">{arcRealityFateAgreementRating}</span>\n                        </div>\n                      </div>\n                      {(arcRealityMyAgreementRating < 10 || arcRealityFateAgreementRating < 10) && (\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"arcRealityWhyNot\" className=\"text-base\">Why not?</Label>\n                          <Textarea id=\"arcRealityWhyNot\" value={arcRealityWhyNot} onChange={(e) => setArcRealityWhyNot(e.target.value)} placeholder=\"Explain any disagreements or misalignments...\" rows={3} />\n                        </div>\n                      )}\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcRealityExperienceInstead\" className=\"text-base\">What would I like to experience instead?</Label>\n                        <Textarea id=\"arcRealityExperienceInstead\" value={arcRealityExperienceInstead} onChange={(e) => setArcRealityExperienceInstead(e.target.value)} placeholder=\"Describe the ideal reality alignment...\" rows={3} />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcRealityRealizations\" className=\"text-base\">Any realizations or conclusions about Reality?</Label>\n                        <Textarea id=\"arcRealityRealizations\" value={arcRealityRealizations} onChange={(e) => setArcRealityRealizations(e.target.value)} placeholder=\"Your insights on reality...\" rows={3} />\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  {/* Communication Section */}\n                  <AccordionItem value=\"communication\" className=\"border bg-card rounded-lg shadow-sm\">\n                    <AccordionTrigger className=\"px-4 py-3 text-lg font-medium hover:bg-muted/50 rounded-t-lg\">\n                      <div className=\"flex items-center\"> <MessagesSquare className=\"mr-2 h-5 w-5 text-primary\"/> Communication </div>\n                    </AccordionTrigger>\n                    <AccordionContent className=\"px-4 pt-2 pb-4 space-y-6 border-t\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcCommunicationOutflowRating\" className=\"text-base\">Is my communication to my goal (outflow) 10/10?</Label>\n                        <div className=\"flex items-center gap-4\">\n                          <Slider id=\"arcCommunicationOutflowRating\" min={0} max={10} step={1} value={[arcCommunicationOutflowRating]} onValueChange={(v) => setArcCommunicationOutflowRating(v[0])} />\n                          <span className=\"text-base font-medium w-10 text-right\">{arcCommunicationOutflowRating}</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcCommunicationInflowRating\" className=\"text-base\">Am I willing to accept any communication coming from my goal (inflow) 10/10?</Label>\n                        <div className=\"flex items-center gap-4\">\n                          <Slider id=\"arcCommunicationInflowRating\" min={0} max={10} step={1} value={[arcCommunicationInflowRating]} onValueChange={(v) => setArcCommunicationInflowRating(v[0])} />\n                          <span className=\"text-base font-medium w-10 text-right\">{arcCommunicationInflowRating}</span>\n                        </div>\n                      </div>\n                      {(arcCommunicationOutflowRating < 10 || arcCommunicationInflowRating < 10) && (\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"arcCommunicationWhyNot\" className=\"text-base\">Why not?</Label>\n                          <Textarea id=\"arcCommunicationWhyNot\" value={arcCommunicationWhyNot} onChange={(e) => setArcCommunicationWhyNot(e.target.value)} placeholder=\"Explain any communication barriers...\" rows={3} />\n                        </div>\n                      )}\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcCommunicationExperienceInstead\" className=\"text-base\">What would I like to experience instead?</Label>\n                        <Textarea id=\"arcCommunicationExperienceInstead\" value={arcCommunicationExperienceInstead} onChange={(e) => setArcCommunicationExperienceInstead(e.target.value)} placeholder=\"Describe the ideal communication flow...\" rows={3} />\n                      </div>\n                       <div className=\"space-y-2\">\n                        <Label htmlFor=\"arcCommunicationRealizations\" className=\"text-base\">Any realizations or conclusions about Communication?</Label>\n                        <Textarea id=\"arcCommunicationRealizations\" value={arcCommunicationRealizations} onChange={(e) => setArcCommunicationRealizations(e.target.value)} placeholder=\"Your insights on communication...\" rows={3} />\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* EMT */}\n          {selectedProcessType === 'emt' && (\n             <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n                <CardHeader className=\"bg-accent/10\">\n                    <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                    <Wand className=\"mr-3 h-6 w-6\"/>EMT\n                    </CardTitle>\n                    <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Work through an experience using the Experience Modification Technique.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-6 space-y-6\">\n                    {/* Step 1 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtExperienceDescription\" className=\"text-base\">1. Describe the experience:</Label>\n                        <Textarea id=\"emtExperienceDescription\" value={emtExperienceDescription} onChange={(e) => setEmtExperienceDescription(e.target.value)} placeholder=\"Describe the experience you want to work on...\" rows={3}/>\n                    </div>\n                    {/* Step 2 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtInitialRating\" className=\"text-base\">2. What is the rating of that experience? (-10 to 10)</Label>\n                        <div className=\"flex items-center gap-4\">\n                        <Slider id=\"emtInitialRating\" min={-10} max={10} step={1} value={[emtInitialRating]} onValueChange={(v) => setEmtInitialRating(v[0])} />\n                        <span className=\"text-base font-medium w-12 text-right\">{emtInitialRating}</span>\n                        </div>\n                    </div>\n                    {/* Step 3 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtPositiveParts\" className=\"text-base\">3. What is positive (or relatively positive) part about the experience?</Label>\n                        <Textarea id=\"emtPositiveParts\" value={emtPositiveParts} onChange={(e) => setEmtPositiveParts(e.target.value)} placeholder=\"Identify any positive aspects...\" rows={3}/>\n                    </div>\n                    {/* Step 4 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtNegativeParts\" className=\"text-base\">4. What is negative parts about the experience?</Label>\n                        <Textarea id=\"emtNegativeParts\" value={emtNegativeParts} onChange={(e) => setEmtNegativeParts(e.target.value)} placeholder=\"Identify negative aspects...\" rows={3}/>\n                    </div>\n                    {/* Step 5 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtNeedsDifferentBetter\" className=\"text-base\">5. What needs to be different in that experience to make it even better than that?</Label>\n                        <Textarea id=\"emtNeedsDifferentBetter\" value={emtNeedsDifferentBetter} onChange={(e) => setEmtNeedsDifferentBetter(e.target.value)} placeholder=\"How could it be improved?\" rows={3}/>\n                    </div>\n                    {/* Step 6 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtModifiedRating\" className=\"text-base\">6. What is the rating of that experience now? (-10 to 10)</Label>\n                         <div className=\"flex items-center gap-4\">\n                        <Slider id=\"emtModifiedRating\" min={-10} max={10} step={1} value={[emtModifiedRating]} onValueChange={(v) => setEmtModifiedRating(v[0])} />\n                        <span className=\"text-base font-medium w-12 text-right\">{emtModifiedRating}</span>\n                        </div>\n                    </div>\n                    {/* Step 7 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtNeedsDifferentEvenBetter\" className=\"text-base\">7. What else needs to be different in that experience in order to make it even better than that? (History alignment. For example if you can order an experience like ordering a pizza, how would that experience look like)?</Label>\n                        <Textarea id=\"emtNeedsDifferentEvenBetter\" value={emtNeedsDifferentEvenBetter} onChange={(e) => setEmtNeedsDifferentEvenBetter(e.target.value)} placeholder=\"Further improvements, consider history alignment...\" rows={4}/>\n                    </div>\n                    {/* Step 8 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtHappenedBefore\" className=\"text-base\">8. What happened before that so in that moment you experience that?</Label>\n                        <Textarea id=\"emtHappenedBefore\" value={emtHappenedBefore} onChange={(e) => setEmtHappenedBefore(e.target.value)} placeholder=\"Describe preceding events or states...\" rows={3}/>\n                    </div>\n                    {/* Step 9 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtExperienceNow\" className=\"text-base\">9. Describe the experience as if it is happening right now.</Label>\n                        <Textarea id=\"emtExperienceNow\" value={emtExperienceNow} onChange={(e) => setEmtExperienceNow(e.target.value)} placeholder=\"Present tense description...\" rows={3}/>\n                    </div>\n                    {/* Step 10 */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"emtFinalRating\" className=\"text-base\">10. What is the rating of that experience now? (-10 to 10)</Label>\n                        <div className=\"flex items-center gap-4\">\n                        <Slider id=\"emtFinalRating\" min={-10} max={10} step={1} value={[emtFinalRating]} onValueChange={(v) => setEmtFinalRating(v[0])} />\n                        <span className=\"text-base font-medium w-12 text-right\">{emtFinalRating}</span>\n                        </div>\n                    </div>\n                     <p className=\"text-sm text-muted-foreground pt-2\">\n                        11. Repeat step 7-10 until rating of experience becomes 10/10. (You can save progress and continue later by selecting this process again).\n                    </p>\n                </CardContent>\n            </Card>\n          )}\n          \n          {/* Common Reflection and Improvement Sections - Rendered if applicable */}\n          {((selectedProcessType === 'impossibleToFail' && showProcessingResults && canGoalFail === true) || \n            (selectedProcessType === 'goalDesirability' && goalWantRating < 10 && (whyNotTenRatingReason.trim() || goalWantReasons.trim())) ||\n            (selectedProcessType === 'goalAchievementExperience' && goalAchievementExperienceText.trim()) ||\n            (selectedProcessType === 'bestCaseScenario' && bestCaseScenarioText.trim()) ||\n            (selectedProcessType === 'bestCasePlusActions' && (bestCaseScenarioText.trim() || actionsListText.trim() || actionsCertaintyWhyNotText.trim())) ||\n            (selectedProcessType === 'performingThisAction' && (actionFeelingInitial.trim() || actionFeelingDesired.trim() || actionCharacteristicsNeeded.trim() || actionCharacteristicsWithout.trim() || actionCharacteristicsWith.trim() || actionUnderstandingNeeded.trim() || actionUnderstandingWithout.trim() || actionUnderstandingWith.trim())) ||\n            (selectedProcessType === 'arcTriangle' && (arcAffinityRealizations.trim() || arcRealityRealizations.trim() || arcCommunicationRealizations.trim() || insightsText.trim() || goalImprovementText.trim() )) ||\n            (selectedProcessType === 'emt' && (emtExperienceDescription.trim() || emtPositiveParts.trim() || emtNegativeParts.trim()))\n            ) &&\n            renderReflectionSection()\n          }\n      \n          <div className=\"mt-6 flex justify-center\">\n            <Button \n                onClick={handleJournalSubmit} \n                disabled={isSaveButtonDisabled()}\n                className=\"w-full sm:w-auto bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-2 px-8 py-3 text-lg rounded-lg shadow-md transition-all duration-150 ease-in-out hover:shadow-lg\"\n                aria-label=\"Save Progress\"\n                size=\"lg\"\n            >\n              {isLoadingAi ? (\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              ) : (\n                  <>\n                      <Send className=\"mr-2 h-5 w-5\" />\n                      {getSaveButtonText()}\n                  </>\n              )}\n            </Button>\n          </div>\n        </>\n      )}\n\n\n      <div className=\"mt-8 text-center\">\n        <Button variant=\"link\" asChild>\n          <Link href=\"/\">Back to My Goal Page</Link>\n        </Button>\n         <Button variant=\"link\" asChild className=\"ml-4\">\n          <Link href=\"/history\">View History</Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n"],"names":[],"mappings":"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","debugId":null}}]
}