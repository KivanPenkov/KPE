{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-insight-keywords-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Suggests keywords for user insights using AI.\n *\n * - suggestInsightKeywords - A function that suggests keywords for a given insight text.\n * - SuggestInsightKeywordsInput - The input type for the suggestInsightKeywords function.\n * - SuggestInsightKeywordsOutput - The return type for the suggestInsightKeywords function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestInsightKeywordsInputSchema = z.object({\n  insightText: z.string().describe(\"The user's insight text to analyze for keywords.\"),\n});\nexport type SuggestInsightKeywordsInput = z.infer<typeof SuggestInsightKeywordsInputSchema>;\n\nconst SuggestInsightKeywordsOutputSchema = z.object({\n  keywords: z.array(z.string()).describe('A list of suggested keywords or short phrases (3-5 items).'),\n});\nexport type SuggestInsightKeywordsOutput = z.infer<typeof SuggestInsightKeywordsOutputSchema>;\n\nexport async function suggestInsightKeywords(input: SuggestInsightKeywordsInput): Promise<SuggestInsightKeywordsOutput> {\n  return suggestInsightKeywordsFlow(input);\n}\n\nconst suggestKeywordsPrompt = ai.definePrompt({\n  name: 'suggestInsightKeywordsPrompt',\n  input: {schema: SuggestInsightKeywordsInputSchema},\n  output: {schema: SuggestInsightKeywordsOutputSchema},\n  prompt: `You are an AI assistant helping users reflect on their goals and insights.\nGiven the following user's insight about overcoming a potential failure related to their goal, suggest 3-5 concise keywords or short phrases.\nThese keywords should capture the main themes, actionable elements, or core realizations from the insight.\nEnsure the output is a list of strings.\n\nUser Insight:\n{{{insightText}}}\n\nSuggested Keywords:`,\n  config: {\n    temperature: 0.5, \n  }\n});\n\nconst suggestInsightKeywordsFlow = ai.defineFlow(\n  {\n    name: 'suggestInsightKeywordsFlow',\n    inputSchema: SuggestInsightKeywordsInputSchema,\n    outputSchema: SuggestInsightKeywordsOutputSchema,\n  },\n  async (input) => {\n    const {output} = await suggestKeywordsPrompt(input);\n    if (!output || !Array.isArray(output.keywords)) {\n        console.warn(\"LLM did not return expected keywords format. Output:\", output);\n        return { keywords: [] };\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;IAsBsB","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/categorize-failure-reason-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Categorizes a user's stated reason for potential goal failure using AI.\n *\n * - categorizeFailureReason - A function that categorizes the failure reason.\n * - CategorizeFailureReasonInput - The input type for the categorizeFailureReason function.\n * - CategorizeFailureReasonOutput - The return type for the categorizeFailureReason function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CategorizeFailureReasonInputSchema = z.object({\n  failureReason: z.string().describe(\"The user's stated reason for why their goal might fail.\"),\n});\nexport type CategorizeFailureReasonInput = z.infer<typeof CategorizeFailureReasonInputSchema>;\n\nconst CategorizeFailureReasonOutputSchema = z.object({\n  category: z.enum(['POSSIBLE_OUTCOME', 'PAST_TRAIT', 'ABSOLUTE_TRUTH'])\n    .describe('The identified category of the failure reason.'),\n  categorizedStatement: z.string()\n    .describe('The failure reason rephrased according to the identified category and its template.'),\n});\nexport type CategorizeFailureReasonOutput = z.infer<typeof CategorizeFailureReasonOutputSchema>;\n\nexport async function categorizeFailureReason(input: CategorizeFailureReasonInput): Promise<CategorizeFailureReasonOutput> {\n  return categorizeFailureReasonFlow(input);\n}\n\nconst categorizeFailureReasonPrompt = ai.definePrompt({\n  name: 'categorizeFailureReasonPrompt',\n  input: {schema: CategorizeFailureReasonInputSchema},\n  output: {schema: CategorizeFailureReasonOutputSchema},\n  prompt: `You are an AI assistant helping users process potential failures related to their goals.\nAnalyze the user's stated reason for potential failure and categorize it into one of the following three categories.\nThen, rephrase the failure reason according to the template for the identified category.\n\nCategories and Templates:\n\n1.  **POSSIBLE_OUTCOME**: The reason describes a potential external event or outcome that might occur.\n    *   Template: \"It is possible to fail because it is possible that [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'bad weather', rephrase to 'the weather will be bad']\"\n    *   Example Input: \"the project might get delayed\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that the project might get delayed\"\n    *   Example Input: \"I don't get the promotion\"\n    *   Example Output Statement: \"It is possible to fail because it is possible that I won't get the promotion\"\n\n2.  **PAST_TRAIT**: The reason describes a personal trait, past behavior, or recurring pattern of the user.\n    *   Template: \"It is possible to fail because in the past I have been [trait/behavior from original reason, e.g., 'lazy', 'procrastinating', 'afraid to ask for help']\"\n    *   Example Input: \"I am lazy\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been lazy\"\n    *   Example Input: \"I tend to procrastinate\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have tended to procrastinate\"\n    *   Example Input: \"my usual fear of public speaking\"\n    *   Example Output Statement: \"It is possible to fail because in the past I have been afraid of public speaking\"\n\n\n3.  **ABSOLUTE_TRUTH**: The reason describes something the user perceives as an unchangeable fact, an absolute external barrier, or a deeply ingrained limiting belief, which they express as a feeling about the situation.\n    *   Template: \"It is possible to fail because I feel [original reason, rephrased for grammatical completeness if needed. E.g., if user says 'the economy is bad', rephrase to 'the economy is bad'; if user says 'success is impossible for me', rephrase to 'success is impossible for me']\"\n    *   Example Input: \"the economy is bad\"\n    *   Example Output Statement: \"It is possible to fail because I feel the economy is bad\"\n    *   Example Input: \"success is impossible for me\"\n    *   Example Output Statement: \"It is possible to fail because I feel success is impossible for me\"\n    *   Example Input: \"There's not enough time in the day\"\n    *   Example Output Statement: \"It is possible to fail because I feel there's not enough time in the day\"\n\n\nUser's Failure Reason:\n{{{failureReason}}}\n\nReturn ONLY the identified category and the rephrased statement based on the templates.\nThe 'categorizedStatement' should be the rephrased version.\n`,\n  config: {\n    temperature: 0.3, // Lower temperature for more deterministic categorization\n  }\n});\n\nconst categorizeFailureReasonFlow = ai.defineFlow(\n  {\n    name: 'categorizeFailureReasonFlow',\n    inputSchema: CategorizeFailureReasonInputSchema,\n    outputSchema: CategorizeFailureReasonOutputSchema,\n  },\n  async (input) => {\n    const {output} = await categorizeFailureReasonPrompt(input);\n    if (!output) {\n      // Fallback or error handling if LLM doesn't return expected output\n      console.error(\"LLM did not return expected output for failure reason categorization.\");\n      // Return a default or throw an error\n      return { \n        category: 'ABSOLUTE_TRUTH', // Default category\n        categorizedStatement: `It is possible to fail because I feel ${input.failureReason}` // Default statement based on new rule\n      };\n    }\n    return output;\n  }\n);\n\n"],"names":[],"mappings":";;;;;IAyBsB","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/processing/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\n// Slider, Input are no longer directly used for goal setting on this page.\n\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n// JournalEditor, SentimentDisplay, ProgressChart are removed\nimport type { JournalEntry } from '@/types';\n// analyzeSentiment and AnalyzeSentimentOutput are removed\nimport { suggestInsightKeywords, type SuggestInsightKeywordsOutput } from '@/ai/flows/suggest-insight-keywords-flow';\nimport { categorizeFailureReason, type CategorizeFailureReasonOutput } from '@/ai/flows/categorize-failure-reason-flow';\n// format, parseISO are removed as chart is gone\nimport { Loader2, Send, Lightbulb, AlertTriangle, CheckCircle, XCircle, MessageSquareHeart, Sparkles, Info, Target, ShieldCheck, RefreshCw } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\n\n\nconst JOURNAL_HISTORY_KEY = 'reflectifyJournalHistory';\n\n// NegativeCharacteristicState and initialCharacteristics removed\n\nexport default function ProcessingPage() {\n  const [canGoalFail, setCanGoalFail] = useState<boolean | null>(null);\n\n  const [failureReason, setFailureReason] = useState<string>('');\n  const [leftHandText, setLeftHandText] = useState<string>('');\n  const [rightHandText, setRightHandText] = useState<string>('');\n  const [insightsText, setInsightsText] = useState<string>('');\n  const [goalImprovementText, setGoalImprovementText] = useState<string>('');\n  const [showProcessingResults, setShowProcessingResults] = useState<boolean>(false);\n\n  // journalEntryText, negativeCharacteristics, currentSentiment, chartData states removed\n\n  const [journalHistory, setJournalHistory] = useState<JournalEntry[]>([]);\n  const [isLoadingAi, setIsLoadingAi] = useState<boolean>(false); // Used for AI calls and main submit\n  const [isProcessingFailure, setIsProcessingFailure] = useState<boolean>(false);\n  const { toast } = useToast();\n\n  const [suggestedKeywords, setSuggestedKeywords] = useState<string[] | null>(null);\n  const [isSuggestingKeywords, setIsSuggestingKeywords] = useState<boolean>(false);\n  const [categorizedFailureOutput, setCategorizedFailureOutput] = useState<CategorizeFailureReasonOutput | null>(null);\n\n\n  useEffect(() => {\n    try {\n      const storedHistory = localStorage.getItem(JOURNAL_HISTORY_KEY);\n      if (storedHistory) {\n        const parsedHistory: JournalEntry[] = JSON.parse(storedHistory);\n        // Filter for processing entries: either marked as fail-proof or has a failure reason\n        const processingEntries = parsedHistory.filter(\n          entry => entry.isFailProof === true || (entry.failureReason && entry.failureReason.trim() !== '')\n        );\n        setJournalHistory(processingEntries);\n      }\n    } catch (error) {\n      console.error(\"Failed to load or filter journal history from localStorage:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Could not load your journal history.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n  // useEffect for chartData removed\n\n  const handleSetCanGoalFail = (value: boolean) => {\n    setCanGoalFail(value);\n    setSuggestedKeywords(null); \n    setShowProcessingResults(false);\n    setCategorizedFailureOutput(null);\n    setLeftHandText('');\n    setRightHandText('');\n    setInsightsText('');\n    setGoalImprovementText('');\n\n\n    if (value === false) {\n      setFailureReason('');\n      toast({\n        title: \"Goal Marked as Fail-Proof\",\n        description: \"Failure analysis section has been hidden.\",\n        variant: \"default\",\n      });\n    } else {\n        setInsightsText(''); // Clear insights if switching back to \"failure is possible\"\n    }\n  };\n\n  // handleCharacteristicChange removed\n\n  const handleFailureProcessing = useCallback(async () => {\n    if (!failureReason.trim()) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please describe how your goal could potentially fail.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsProcessingFailure(true);\n    setSuggestedKeywords(null);\n    setCategorizedFailureOutput(null);\n    setShowProcessingResults(false);\n    setGoalImprovementText('');\n\n    try {\n      const result = await categorizeFailureReason({ failureReason });\n      setCategorizedFailureOutput(result);\n      setLeftHandText(`${result.categorizedStatement}, inhale exhale.`);\n      setRightHandText(`Although ${result.categorizedStatement}, I still want my goal.`);\n      setShowProcessingResults(true);\n      setInsightsText(''); \n      toast({\n        title: 'Processing Complete',\n        description: '10F processing results are now available. Please reflect on your insights.',\n      });\n    } catch (error) {\n      console.error('Error categorizing failure reason:', error);\n      setLeftHandText(`It is possible to fail because ${failureReason}, inhale exhale.`);\n      setRightHandText(`Although it is possible to fail because ${failureReason}, I still want my goal.`);\n      setShowProcessingResults(true);\n      setInsightsText('');\n      toast({\n        title: 'Processing Note',\n        description: 'Could not categorize failure reason with AI, using basic processing. Please reflect on your insights.',\n        variant: 'default',\n      });\n    } finally {\n      setIsProcessingFailure(false);\n    }\n  }, [failureReason, toast]);\n\n  const handleSuggestKeywords = useCallback(async () => {\n    if (!insightsText.trim()) {\n      toast({\n        title: 'Empty Insight',\n        description: 'Please write your insights before suggesting keywords.',\n        variant: 'default',\n      });\n      return;\n    }\n    setIsSuggestingKeywords(true);\n    setSuggestedKeywords(null);\n    try {\n      const result = await suggestInsightKeywords({ insightText: insightsText });\n      setSuggestedKeywords(result.keywords);\n      toast({\n        title: 'Keywords Suggested',\n        description: 'AI has suggested some keywords for your insight.',\n      });\n    } catch (error) {\n      console.error('Error suggesting keywords:', error);\n      toast({\n        title: 'Keyword Suggestion Error',\n        description: 'Could not get keyword suggestions. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSuggestingKeywords(false);\n    }\n  }, [insightsText, toast]);\n\n  const handleJournalSubmit = useCallback(async () => {\n    if (canGoalFail === null) {\n      toast({\n        title: 'Incomplete Entry',\n        description: 'Please select if your goal can potentially fail.',\n        variant: 'default',\n      });\n      return;\n    }\n\n    if (canGoalFail === true) {\n      if (!failureReason.trim()) {\n        toast({\n          title: 'Incomplete Entry',\n          description: 'Please describe how your goal could potentially fail.',\n          variant: 'default',\n        });\n        return;\n      }\n      if (showProcessingResults && !insightsText.trim()) {\n        toast({\n          title: 'Missing Insights',\n          description: 'Please provide your insights and realizations from the 10F processing.',\n          variant: 'default',\n        });\n        return;\n      }\n    }\n\n    setIsLoadingAi(true);\n    try {\n      const newEntry: JournalEntry = {\n        id: new Date().toISOString(),\n        date: new Date().toISOString(),\n        isFailProof: canGoalFail === false ? true : undefined,\n        failureReason: canGoalFail === true && failureReason.trim() ? failureReason.trim() : undefined,\n        leftHandText: canGoalFail === true && leftHandText.trim() ? leftHandText.trim() : undefined,\n        rightHandText: canGoalFail === true && rightHandText.trim() ? rightHandText.trim() : undefined,\n        insightsText: canGoalFail === true && insightsText.trim() ? insightsText.trim() : undefined,\n        failureCategory: canGoalFail === true ? categorizedFailureOutput?.category : undefined,\n        categorizedFailureStatement: canGoalFail === true ? categorizedFailureOutput?.categorizedStatement : undefined,\n        goalImprovementText: canGoalFail === true && goalImprovementText.trim() ? goalImprovementText.trim() : undefined,\n        // Ensure other fields not relevant to processing are not set or are undefined\n        entryText: '', \n        goalText: undefined,\n        goalAchievability: undefined,\n        goalDeadline: undefined,\n        sentimentAnalysis: undefined,\n        negativeCharacteristics: undefined,\n      };\n\n      setJournalHistory(prevHistory => {\n        // Filter previous history to only include processing entries\n        const previousProcessingEntries = prevHistory.filter(\n            entry => entry.isFailProof === true || (entry.failureReason && entry.failureReason.trim() !== '')\n        );\n        const updatedHistory = [newEntry, ...previousProcessingEntries];\n        try {\n          localStorage.setItem(JOURNAL_HISTORY_KEY, JSON.stringify(updatedHistory));\n        } catch (error) {\n          console.error(\"Failed to save journal history to localStorage:\", error);\n          toast({\n            title: \"Storage Error\",\n            description: \"Could not save your journal entry due to storage limitations.\",\n            variant: \"destructive\",\n          });\n        }\n        return updatedHistory;\n      });\n\n      // Reset fields\n      setCanGoalFail(null); \n      setFailureReason('');\n      setLeftHandText('');\n      setRightHandText('');\n      setInsightsText('');\n      setGoalImprovementText('');\n      setShowProcessingResults(false);\n      setSuggestedKeywords(null);\n      setCategorizedFailureOutput(null);\n\n      toast({\n        title: canGoalFail === false ? 'Status Saved' : 'Process Saved',\n        description: canGoalFail === false ? 'Your goal has been marked as fail-proof.' : 'Your failure analysis and insights have been recorded.',\n      });\n    } catch (error) {\n      console.error('Error saving processing entry:', error);\n      toast({\n        title: 'Error',\n        description: 'Could not save your processing entry. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoadingAi(false);\n    }\n  }, [toast, canGoalFail, failureReason, leftHandText, rightHandText, insightsText, goalImprovementText, showProcessingResults, categorizedFailureOutput, journalHistory]);\n\n  const getCategoryDescription = (category?: string) => {\n    if (!category) return null;\n    switch (category) {\n      case 'POSSIBLE_OUTCOME':\n        return 'This failure reason seems to relate to a potential external event or outcome.';\n      case 'PAST_TRAIT':\n        return 'This failure reason seems to relate to a personal trait or past behavior.';\n      case 'ABSOLUTE_TRUTH':\n        return 'This failure reason seems to relate to a perceived unchangeable fact or limiting belief.';\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-3xl py-8 px-4 flex flex-col gap-8\">\n      <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n        <CardHeader className=\"bg-primary/30\">\n          <CardTitle className=\"text-xl font-semibold text-primary-foreground\">\n            Impossible to fail\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-6 space-y-6\">\n          <div className=\"space-y-3\">\n            <p className=\"text-foreground text-base\">\n              Pay attention to your goal, is it possible to fail?\n            </p>\n            <div className=\"flex flex-wrap gap-4 pt-1\">\n              <Button \n                variant={canGoalFail === true ? 'default' : 'outline'} \n                onClick={() => handleSetCanGoalFail(true)}\n                className=\"flex-grow sm:flex-grow-0\"\n              >\n                <XCircle className=\"mr-2 h-5 w-5\" /> Yes, failure is possible\n              </Button>\n              <Button \n                variant={canGoalFail === false ? 'default' : 'outline'} \n                onClick={() => handleSetCanGoalFail(false)}\n                className={cn(\n                  \"flex-grow sm:flex-grow-0\",\n                  canGoalFail === false && \"!bg-accent !text-accent-foreground hover:!bg-accent/90\"\n                )}\n              >\n                <CheckCircle className=\"mr-2 h-5 w-5\" /> No, it's fail-proof\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {canGoalFail === true && (\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-foreground\">\n              Standard 10F Process\n            </CardTitle>\n            <CardDescription className=\"text-base text-muted-foreground pt-2\">\n              If your goal could fail, describe how that might happen.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"failureReason\" className=\"text-base\">How could your goal potentially fail?</Label>\n              <Textarea\n                id=\"failureReason\"\n                value={failureReason}\n                onChange={(e) => {\n                  setFailureReason(e.target.value);\n                  setShowProcessingResults(false); \n                  setCategorizedFailureOutput(null);\n                }}\n                placeholder=\"e.g., It is too expensive, I might lose motivation, unexpected events, I am lazy...\"\n                rows={3}\n                className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n              />\n            </div>\n            <Button \n              onClick={handleFailureProcessing} \n              disabled={isProcessingFailure || !failureReason.trim()}\n              className=\"w-full sm:w-auto bg-accent text-accent-foreground hover:bg-accent/90 focus-visible:ring-ring px-6 py-3 text-base\"\n              aria-label=\"Process Potential Failure Mode\"\n            >\n              {isProcessingFailure ? (\n                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              ) : (\n                <Lightbulb className=\"mr-2 h-5 w-5\" />\n              )}\n              Process Potential Failure\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {canGoalFail === false && (\n         <Card className=\"shadow-lg rounded-xl overflow-hidden border-accent\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-accent-foreground flex items-center\">\n                <ShieldCheck className=\"mr-2 h-6 w-6 text-accent\" /> Goal Confidence\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-2\">\n              <p className=\"text-base text-foreground\">\n                Great! You now know your goal is impossible to fail.\n              </p>\n            </CardContent>\n          </Card>\n      )}\n\n\n      {showProcessingResults && canGoalFail === true && (\n        <>\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-foreground\">10F Processing Results</CardTitle>\n            <CardDescription className=\"text-base text-muted-foreground pt-2\">\n              Reflect on these statements to strengthen your resolve.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6 space-y-6\">\n            {categorizedFailureOutput?.category && (\n              <div className=\"p-3 bg-primary/10 rounded-md border border-primary/30 text-sm text-primary-foreground flex items-start gap-2\">\n                <Info className=\"h-5 w-5 mt-0.5 shrink-0\" />\n                <p><span className=\"font-semibold\">Categorization:</span> {getCategoryDescription(categorizedFailureOutput.category)}</p>\n              </div>\n            )}\n            <h4 className=\"text-lg font-semibold text-foreground\">Do the 10F processing:</h4>\n            <Card className=\"bg-card border-destructive/50\">\n              <CardHeader>\n                <CardTitle className=\"text-md font-semibold text-destructive flex items-center\">\n                  <AlertTriangle className=\"mr-2 h-5 w-5 text-destructive\" /> Left Hand Focus\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-base text-foreground\">{leftHandText}</p>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card border-accent/50\">\n              <CardHeader>\n                <CardTitle className=\"text-md font-semibold text-accent-foreground flex items-center\">\n                  <Lightbulb className=\"mr-2 h-5 w-5 text-accent\" /> Right Hand Affirmation\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-base text-foreground\">{rightHandText}</p>\n              </CardContent>\n            </Card>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <MessageSquareHeart className=\"mr-2 h-6 w-6 text-primary\"/> Insights and Realizations\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Is there something you could conclude about this process, about possibilities for its achievement? (Usually something about how you could resolve that barrier). This is the user&apos;s most important part!\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Label htmlFor=\"insightsText\" className=\"text-base\">Your Insights:</Label>\n                <Textarea\n                    id=\"insightsText\"\n                    value={insightsText}\n                    onChange={(e) => {\n                      setInsightsText(e.target.value);\n                      setSuggestedKeywords(null); \n                    }}\n                    placeholder=\"e.g., I realize I can break down the cost, or seek alternative cheaper solutions...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n                <div className=\"mt-4 space-y-3\">\n                    <Button\n                        onClick={handleSuggestKeywords}\n                        disabled={isSuggestingKeywords || !insightsText.trim()}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-sm\"\n                    >\n                        {isSuggestingKeywords ? (\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        ) : (\n                            <Sparkles className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Suggest Keywords\n                    </Button>\n                    {suggestedKeywords && suggestedKeywords.length > 0 && (\n                        <div className=\"p-3 bg-muted/50 rounded-md border\">\n                            <h5 className=\"text-sm font-semibold mb-2 text-foreground\">Suggested Keywords:</h5>\n                            <div className=\"flex flex-wrap gap-2\">\n                                {suggestedKeywords.map((keyword, index) => (\n                                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                        {keyword}\n                                    </Badge>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-foreground flex items-center\">\n                    <Target className=\"mr-2 h-6 w-6 text-primary\"/> Goal Improvement\n                </CardTitle>\n                <CardDescription className=\"text-base text-muted-foreground pt-2\">\n                    Does the process you did suggest some improvements or better definition of your goal? Should you add something, remove something or change something to make it more attractive and better defined?\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-2\">\n                <Label htmlFor=\"goalImprovementText\" className=\"text-base\">Your Goal Improvements:</Label>\n                <Textarea\n                    id=\"goalImprovementText\"\n                    value={goalImprovementText}\n                    onChange={(e) => setGoalImprovementText(e.target.value)}\n                    placeholder=\"e.g., I could redefine my goal to be more specific about the timeline, or add smaller milestones...\"\n                    rows={4}\n                    className=\"text-base leading-relaxed shadow-sm focus:ring-2 focus:ring-ring\"\n                />\n            </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg rounded-xl overflow-hidden border-primary\">\n            <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-primary-foreground flex items-center\">\n                    <RefreshCw className=\"mr-2 h-6 w-6 text-primary\"/> Repeat the Process\n                </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-2 space-y-3\">\n                <p className=\"text-base text-foreground\">\n                    Return to point 1. Identification of the next barrier which makes you retreat from your goal, and repeat the process until you know it is impossible to fail.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                    Usually this takes students 3-7 processes to achieve.\n                </p>\n                 <Button \n                    variant={'outline'} \n                    onClick={() => {\n                        setCanGoalFail(null);\n                        setFailureReason('');\n                        setLeftHandText('');\n                        setRightHandText('');\n                        setInsightsText('');\n                        setGoalImprovementText('');\n                        setShowProcessingResults(false);\n                        setSuggestedKeywords(null);\n                        setCategorizedFailureOutput(null);\n                        window.scrollTo({ top: 0, behavior: 'smooth' });\n                        toast({\n                            title: \"Process Reset\",\n                            description: \"You can now identify the next barrier for your goal.\",\n                        });\n                    }}\n                    className=\"mt-2\"\n                >\n                    <RefreshCw className=\"mr-2 h-4 w-4\" /> Start Next Process Iteration\n                </Button>\n            </CardContent>\n        </Card>\n        </>\n      )}\n      \n      <div className=\"mt-6 flex justify-center\">\n        <Button \n            onClick={handleJournalSubmit} \n            disabled={isLoadingAi || canGoalFail === null || (canGoalFail === true && (!failureReason.trim() || (showProcessingResults && !insightsText.trim())))}\n            className=\"w-full sm:w-auto bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-2 px-8 py-3 text-lg rounded-lg shadow-md transition-all duration-150 ease-in-out hover:shadow-lg\"\n            aria-label={canGoalFail === false ? \"Save Fail-Proof Status\" : \"Save Processing Insights\"}\n            size=\"lg\"\n        >\n            {isLoadingAi ? (\n                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n            ) : (\n                <>\n                    <Send className=\"mr-2 h-5 w-5\" />\n                    {canGoalFail === false ? \"Save Status\" : \"Save Process\"}\n                </>\n            )}\n        </Button>\n      </div>\n\n\n      <div className=\"mt-8 text-center\">\n        <Button variant=\"link\" asChild>\n          <Link href=\"/\">Back to Main Journal Page</Link>\n        </Button>\n         <Button variant=\"link\" asChild className=\"ml-4\">\n          <Link href=\"/history\">View History</Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}